
/Users/raventt/MBP_Projects/arduino/maxPhoton1/target/maxPhoton1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001438  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a1450  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         0000006c  20000300  080a1454  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000168  2000036c  2000036c  0003036c  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a14c0  080a14c0  000214c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a14e8  080a14e8  000214e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00080ec0  00000000  00000000  000214ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000bbfe  00000000  00000000  000a23ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000e0bd  00000000  00000000  000adfaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000017b8  00000000  00000000  000bc067  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000027d0  00000000  00000000  000bd81f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002112f  00000000  00000000  000bffef  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001ab6b  00000000  00000000  000e111e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a21ea  00000000  00000000  000fbc89  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000a274  00000000  00000000  0019de74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	78 10 0a 08                                         x...

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f000 ff4f 	bl	80a0ed0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f000 ff54 	bl	80a0ee6 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a1454 	.word	0x080a1454
 80a004c:	2000036c 	.word	0x2000036c
 80a0050:	2000036c 	.word	0x2000036c
 80a0054:	200004d4 	.word	0x200004d4
 80a0058:	200004d4 	.word	0x200004d4

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fd71 	bl	80a0b44 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1418 	.word	0x080a1418
 80a0084:	080a144c 	.word	0x080a144c

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bcea 	b.w	80a0a60 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f83b 	bl	80a0108 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bd17 	b.w	80a0ac8 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 b98d 	b.w	80a03b8 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 b993 	b.w	80a03c8 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_Z7MAXreadv>:
  Serial.println(range);
  delay(1200); //set interval for sensor reading
}

int MAXread()
{
 80a00b2:	b513      	push	{r0, r1, r4, lr}
  uint8_t length = 4;
  char buffer[5];

  // flush and wait for a range reading
  Serial1.flush();
 80a00b4:	f000 fb96 	bl	80a07e4 <_Z22__fetch_global_Serial1v>
 80a00b8:	6803      	ldr	r3, [r0, #0]
 80a00ba:	69db      	ldr	r3, [r3, #28]
 80a00bc:	4798      	blx	r3

  while (!Serial1.available() || Serial1.read() != 'R');
 80a00be:	f000 fb91 	bl	80a07e4 <_Z22__fetch_global_Serial1v>
 80a00c2:	6803      	ldr	r3, [r0, #0]
 80a00c4:	691b      	ldr	r3, [r3, #16]
 80a00c6:	4798      	blx	r3
 80a00c8:	2800      	cmp	r0, #0
 80a00ca:	d0f8      	beq.n	80a00be <_Z7MAXreadv+0xc>
 80a00cc:	f000 fb8a 	bl	80a07e4 <_Z22__fetch_global_Serial1v>
 80a00d0:	6803      	ldr	r3, [r0, #0]
 80a00d2:	695b      	ldr	r3, [r3, #20]
 80a00d4:	4798      	blx	r3
 80a00d6:	2852      	cmp	r0, #82	; 0x52
 80a00d8:	d1f1      	bne.n	80a00be <_Z7MAXreadv+0xc>
 80a00da:	2400      	movs	r4, #0

  // read the range
  for (int i = 0; i < length; i++)
  {
    while (!Serial1.available());
 80a00dc:	f000 fb82 	bl	80a07e4 <_Z22__fetch_global_Serial1v>
 80a00e0:	6803      	ldr	r3, [r0, #0]
 80a00e2:	691b      	ldr	r3, [r3, #16]
 80a00e4:	4798      	blx	r3
 80a00e6:	2800      	cmp	r0, #0
 80a00e8:	d0f8      	beq.n	80a00dc <_Z7MAXreadv+0x2a>
  
    buffer[i] = Serial1.read();
 80a00ea:	f000 fb7b 	bl	80a07e4 <_Z22__fetch_global_Serial1v>
 80a00ee:	6803      	ldr	r3, [r0, #0]
 80a00f0:	695b      	ldr	r3, [r3, #20]
 80a00f2:	4798      	blx	r3
 80a00f4:	f80d 0004 	strb.w	r0, [sp, r4]
  Serial1.flush();

  while (!Serial1.available() || Serial1.read() != 'R');

  // read the range
  for (int i = 0; i < length; i++)
 80a00f8:	3401      	adds	r4, #1
 80a00fa:	2c04      	cmp	r4, #4
 80a00fc:	d1ee      	bne.n	80a00dc <_Z7MAXreadv+0x2a>
    while (!Serial1.available());
  
    buffer[i] = Serial1.read();
  }

  return atoi(buffer);
 80a00fe:	4668      	mov	r0, sp
 80a0100:	f000 fed4 	bl	80a0eac <atoi>
 80a0104:	b002      	add	sp, #8
 80a0106:	bd10      	pop	{r4, pc}

080a0108 <loop>:
 * Author: David Richards / ravenIoT
 * Date: 5.13.19
 */

void loop()
{
 80a0108:	b510      	push	{r4, lr}
  Serial.begin(9600);
 80a010a:	f000 fbf5 	bl	80a08f8 <_Z16_fetch_usbserialv>
 80a010e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0112:	f000 fbe5 	bl	80a08e0 <_ZN9USBSerial5beginEl>
  Serial.println("Hello ravenTT!");
 80a0116:	f000 fbef 	bl	80a08f8 <_Z16_fetch_usbserialv>
 80a011a:	4911      	ldr	r1, [pc, #68]	; (80a0160 <loop+0x58>)
 80a011c:	f000 fa71 	bl	80a0602 <_ZN5Print7printlnEPKc>
  Serial1.begin(9600);
 80a0120:	f000 fb60 	bl	80a07e4 <_Z22__fetch_global_Serial1v>
 80a0124:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0128:	f000 fb58 	bl	80a07dc <_ZN11USARTSerial5beginEm>
  Serial.println("Sonar connected");
 80a012c:	f000 fbe4 	bl	80a08f8 <_Z16_fetch_usbserialv>
 80a0130:	490c      	ldr	r1, [pc, #48]	; (80a0164 <loop+0x5c>)
 80a0132:	f000 fa66 	bl	80a0602 <_ZN5Print7printlnEPKc>
  int range = MAXread();
 80a0136:	f7ff ffbc 	bl	80a00b2 <_Z7MAXreadv>
 80a013a:	4604      	mov	r4, r0
  Serial.print("Range: ");
 80a013c:	f000 fbdc 	bl	80a08f8 <_Z16_fetch_usbserialv>
 80a0140:	4909      	ldr	r1, [pc, #36]	; (80a0168 <loop+0x60>)
 80a0142:	f000 fa4b 	bl	80a05dc <_ZN5Print5printEPKc>
  Serial.println(range);
 80a0146:	f000 fbd7 	bl	80a08f8 <_Z16_fetch_usbserialv>
 80a014a:	4621      	mov	r1, r4
 80a014c:	220a      	movs	r2, #10
 80a014e:	f000 fab0 	bl	80a06b2 <_ZN5Print7printlnEii>
  delay(1200); //set interval for sensor reading
}
 80a0152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial1.begin(9600);
  Serial.println("Sonar connected");
  int range = MAXread();
  Serial.print("Range: ");
  Serial.println(range);
  delay(1200); //set interval for sensor reading
 80a0156:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80a015a:	f000 b93d 	b.w	80a03d8 <delay>
 80a015e:	bf00      	nop
 80a0160:	080a108c 	.word	0x080a108c
 80a0164:	080a109b 	.word	0x080a109b
 80a0168:	080a10ab 	.word	0x080a10ab

080a016c <_GLOBAL__sub_I_loop>:
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a016c:	f000 b818 	b.w	80a01a0 <HAL_Pin_Map>

080a0170 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0170:	b508      	push	{r3, lr}
 80a0172:	4b02      	ldr	r3, [pc, #8]	; (80a017c <os_mutex_create+0xc>)
 80a0174:	681b      	ldr	r3, [r3, #0]
 80a0176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0178:	9301      	str	r3, [sp, #4]
 80a017a:	bd08      	pop	{r3, pc}
 80a017c:	080601d0 	.word	0x080601d0

080a0180 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0180:	b508      	push	{r3, lr}
 80a0182:	4b02      	ldr	r3, [pc, #8]	; (80a018c <HAL_RNG_GetRandomNumber+0xc>)
 80a0184:	681b      	ldr	r3, [r3, #0]
 80a0186:	685b      	ldr	r3, [r3, #4]
 80a0188:	9301      	str	r3, [sp, #4]
 80a018a:	bd08      	pop	{r3, pc}
 80a018c:	0806019c 	.word	0x0806019c

080a0190 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0190:	b508      	push	{r3, lr}
 80a0192:	4b02      	ldr	r3, [pc, #8]	; (80a019c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0194:	681b      	ldr	r3, [r3, #0]
 80a0196:	695b      	ldr	r3, [r3, #20]
 80a0198:	9301      	str	r3, [sp, #4]
 80a019a:	bd08      	pop	{r3, pc}
 80a019c:	0806019c 	.word	0x0806019c

080a01a0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a01a0:	b508      	push	{r3, lr}
 80a01a2:	4b02      	ldr	r3, [pc, #8]	; (80a01ac <HAL_Pin_Map+0xc>)
 80a01a4:	681b      	ldr	r3, [r3, #0]
 80a01a6:	681b      	ldr	r3, [r3, #0]
 80a01a8:	9301      	str	r3, [sp, #4]
 80a01aa:	bd08      	pop	{r3, pc}
 80a01ac:	080601b0 	.word	0x080601b0

080a01b0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a01b0:	b508      	push	{r3, lr}
 80a01b2:	4b02      	ldr	r3, [pc, #8]	; (80a01bc <HAL_SPI_Init+0xc>)
 80a01b4:	681b      	ldr	r3, [r3, #0]
 80a01b6:	69db      	ldr	r3, [r3, #28]
 80a01b8:	9301      	str	r3, [sp, #4]
 80a01ba:	bd08      	pop	{r3, pc}
 80a01bc:	080601b4 	.word	0x080601b4

080a01c0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a01c0:	b508      	push	{r3, lr}
 80a01c2:	4b02      	ldr	r3, [pc, #8]	; (80a01cc <HAL_USART_Init+0xc>)
 80a01c4:	681b      	ldr	r3, [r3, #0]
 80a01c6:	699b      	ldr	r3, [r3, #24]
 80a01c8:	9301      	str	r3, [sp, #4]
 80a01ca:	bd08      	pop	{r3, pc}
 80a01cc:	080601c4 	.word	0x080601c4

080a01d0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a01d0:	b508      	push	{r3, lr}
 80a01d2:	4b02      	ldr	r3, [pc, #8]	; (80a01dc <HAL_USART_Write_Data+0xc>)
 80a01d4:	681b      	ldr	r3, [r3, #0]
 80a01d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a01d8:	9301      	str	r3, [sp, #4]
 80a01da:	bd08      	pop	{r3, pc}
 80a01dc:	080601c4 	.word	0x080601c4

080a01e0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a01e0:	b508      	push	{r3, lr}
 80a01e2:	4b02      	ldr	r3, [pc, #8]	; (80a01ec <HAL_USART_Available_Data+0xc>)
 80a01e4:	681b      	ldr	r3, [r3, #0]
 80a01e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a01e8:	9301      	str	r3, [sp, #4]
 80a01ea:	bd08      	pop	{r3, pc}
 80a01ec:	080601c4 	.word	0x080601c4

080a01f0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a01f0:	b508      	push	{r3, lr}
 80a01f2:	4b02      	ldr	r3, [pc, #8]	; (80a01fc <HAL_USART_Read_Data+0xc>)
 80a01f4:	681b      	ldr	r3, [r3, #0]
 80a01f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a01f8:	9301      	str	r3, [sp, #4]
 80a01fa:	bd08      	pop	{r3, pc}
 80a01fc:	080601c4 	.word	0x080601c4

080a0200 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0200:	b508      	push	{r3, lr}
 80a0202:	4b02      	ldr	r3, [pc, #8]	; (80a020c <HAL_USART_Peek_Data+0xc>)
 80a0204:	681b      	ldr	r3, [r3, #0]
 80a0206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0208:	9301      	str	r3, [sp, #4]
 80a020a:	bd08      	pop	{r3, pc}
 80a020c:	080601c4 	.word	0x080601c4

080a0210 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0210:	b508      	push	{r3, lr}
 80a0212:	4b02      	ldr	r3, [pc, #8]	; (80a021c <HAL_USART_Flush_Data+0xc>)
 80a0214:	681b      	ldr	r3, [r3, #0]
 80a0216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0218:	9301      	str	r3, [sp, #4]
 80a021a:	bd08      	pop	{r3, pc}
 80a021c:	080601c4 	.word	0x080601c4

080a0220 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0220:	b508      	push	{r3, lr}
 80a0222:	4b02      	ldr	r3, [pc, #8]	; (80a022c <HAL_USART_Available_Data_For_Write+0xc>)
 80a0224:	681b      	ldr	r3, [r3, #0]
 80a0226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0228:	9301      	str	r3, [sp, #4]
 80a022a:	bd08      	pop	{r3, pc}
 80a022c:	080601c4 	.word	0x080601c4

080a0230 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80a0230:	b508      	push	{r3, lr}
 80a0232:	4b02      	ldr	r3, [pc, #8]	; (80a023c <HAL_USART_BeginConfig+0xc>)
 80a0234:	681b      	ldr	r3, [r3, #0]
 80a0236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0238:	9301      	str	r3, [sp, #4]
 80a023a:	bd08      	pop	{r3, pc}
 80a023c:	080601c4 	.word	0x080601c4

080a0240 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0240:	b508      	push	{r3, lr}
 80a0242:	4b02      	ldr	r3, [pc, #8]	; (80a024c <HAL_USB_USART_Init+0xc>)
 80a0244:	681b      	ldr	r3, [r3, #0]
 80a0246:	681b      	ldr	r3, [r3, #0]
 80a0248:	9301      	str	r3, [sp, #4]
 80a024a:	bd08      	pop	{r3, pc}
 80a024c:	080601d8 	.word	0x080601d8

080a0250 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0250:	b508      	push	{r3, lr}
 80a0252:	4b02      	ldr	r3, [pc, #8]	; (80a025c <HAL_USB_USART_Begin+0xc>)
 80a0254:	681b      	ldr	r3, [r3, #0]
 80a0256:	685b      	ldr	r3, [r3, #4]
 80a0258:	9301      	str	r3, [sp, #4]
 80a025a:	bd08      	pop	{r3, pc}
 80a025c:	080601d8 	.word	0x080601d8

080a0260 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0260:	b508      	push	{r3, lr}
 80a0262:	4b02      	ldr	r3, [pc, #8]	; (80a026c <HAL_USB_USART_Available_Data+0xc>)
 80a0264:	681b      	ldr	r3, [r3, #0]
 80a0266:	691b      	ldr	r3, [r3, #16]
 80a0268:	9301      	str	r3, [sp, #4]
 80a026a:	bd08      	pop	{r3, pc}
 80a026c:	080601d8 	.word	0x080601d8

080a0270 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0270:	b508      	push	{r3, lr}
 80a0272:	4b02      	ldr	r3, [pc, #8]	; (80a027c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0274:	681b      	ldr	r3, [r3, #0]
 80a0276:	695b      	ldr	r3, [r3, #20]
 80a0278:	9301      	str	r3, [sp, #4]
 80a027a:	bd08      	pop	{r3, pc}
 80a027c:	080601d8 	.word	0x080601d8

080a0280 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0280:	b508      	push	{r3, lr}
 80a0282:	4b02      	ldr	r3, [pc, #8]	; (80a028c <HAL_USB_USART_Receive_Data+0xc>)
 80a0284:	681b      	ldr	r3, [r3, #0]
 80a0286:	699b      	ldr	r3, [r3, #24]
 80a0288:	9301      	str	r3, [sp, #4]
 80a028a:	bd08      	pop	{r3, pc}
 80a028c:	080601d8 	.word	0x080601d8

080a0290 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0290:	b508      	push	{r3, lr}
 80a0292:	4b02      	ldr	r3, [pc, #8]	; (80a029c <HAL_USB_USART_Send_Data+0xc>)
 80a0294:	681b      	ldr	r3, [r3, #0]
 80a0296:	69db      	ldr	r3, [r3, #28]
 80a0298:	9301      	str	r3, [sp, #4]
 80a029a:	bd08      	pop	{r3, pc}
 80a029c:	080601d8 	.word	0x080601d8

080a02a0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a02a0:	b508      	push	{r3, lr}
 80a02a2:	4b02      	ldr	r3, [pc, #8]	; (80a02ac <HAL_USB_USART_Flush_Data+0xc>)
 80a02a4:	681b      	ldr	r3, [r3, #0]
 80a02a6:	6a1b      	ldr	r3, [r3, #32]
 80a02a8:	9301      	str	r3, [sp, #4]
 80a02aa:	bd08      	pop	{r3, pc}
 80a02ac:	080601d8 	.word	0x080601d8

080a02b0 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a02b0:	b508      	push	{r3, lr}
 80a02b2:	4b02      	ldr	r3, [pc, #8]	; (80a02bc <inet_gethostbyname+0xc>)
 80a02b4:	681b      	ldr	r3, [r3, #0]
 80a02b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a02b8:	9301      	str	r3, [sp, #4]
 80a02ba:	bd08      	pop	{r3, pc}
 80a02bc:	080601c0 	.word	0x080601c0

080a02c0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a02c0:	b508      	push	{r3, lr}
 80a02c2:	4b02      	ldr	r3, [pc, #8]	; (80a02cc <set_system_mode+0xc>)
 80a02c4:	681b      	ldr	r3, [r3, #0]
 80a02c6:	685b      	ldr	r3, [r3, #4]
 80a02c8:	9301      	str	r3, [sp, #4]
 80a02ca:	bd08      	pop	{r3, pc}
 80a02cc:	080601a4 	.word	0x080601a4

080a02d0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a02d0:	b508      	push	{r3, lr}
 80a02d2:	4b02      	ldr	r3, [pc, #8]	; (80a02dc <system_delay_ms+0xc>)
 80a02d4:	681b      	ldr	r3, [r3, #0]
 80a02d6:	695b      	ldr	r3, [r3, #20]
 80a02d8:	9301      	str	r3, [sp, #4]
 80a02da:	bd08      	pop	{r3, pc}
 80a02dc:	080601a4 	.word	0x080601a4

080a02e0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a02e0:	b508      	push	{r3, lr}
 80a02e2:	4b03      	ldr	r3, [pc, #12]	; (80a02f0 <system_ctrl_set_app_request_handler+0x10>)
 80a02e4:	681b      	ldr	r3, [r3, #0]
 80a02e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a02ea:	9301      	str	r3, [sp, #4]
 80a02ec:	bd08      	pop	{r3, pc}
 80a02ee:	0000      	.short	0x0000
 80a02f0:	080601a4 	.word	0x080601a4

080a02f4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a02f4:	b508      	push	{r3, lr}
 80a02f6:	4b03      	ldr	r3, [pc, #12]	; (80a0304 <system_ctrl_set_result+0x10>)
 80a02f8:	681b      	ldr	r3, [r3, #0]
 80a02fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a02fe:	9301      	str	r3, [sp, #4]
 80a0300:	bd08      	pop	{r3, pc}
 80a0302:	0000      	.short	0x0000
 80a0304:	080601a4 	.word	0x080601a4

080a0308 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0308:	b508      	push	{r3, lr}
 80a030a:	4b02      	ldr	r3, [pc, #8]	; (80a0314 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a030c:	681b      	ldr	r3, [r3, #0]
 80a030e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0310:	9301      	str	r3, [sp, #4]
 80a0312:	bd08      	pop	{r3, pc}
 80a0314:	080601cc 	.word	0x080601cc

080a0318 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0318:	b508      	push	{r3, lr}
 80a031a:	4b02      	ldr	r3, [pc, #8]	; (80a0324 <network_connect+0xc>)
 80a031c:	681b      	ldr	r3, [r3, #0]
 80a031e:	685b      	ldr	r3, [r3, #4]
 80a0320:	9301      	str	r3, [sp, #4]
 80a0322:	bd08      	pop	{r3, pc}
 80a0324:	080601c8 	.word	0x080601c8

080a0328 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0328:	b508      	push	{r3, lr}
 80a032a:	4b02      	ldr	r3, [pc, #8]	; (80a0334 <network_connecting+0xc>)
 80a032c:	681b      	ldr	r3, [r3, #0]
 80a032e:	689b      	ldr	r3, [r3, #8]
 80a0330:	9301      	str	r3, [sp, #4]
 80a0332:	bd08      	pop	{r3, pc}
 80a0334:	080601c8 	.word	0x080601c8

080a0338 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0338:	b508      	push	{r3, lr}
 80a033a:	4b02      	ldr	r3, [pc, #8]	; (80a0344 <network_disconnect+0xc>)
 80a033c:	681b      	ldr	r3, [r3, #0]
 80a033e:	68db      	ldr	r3, [r3, #12]
 80a0340:	9301      	str	r3, [sp, #4]
 80a0342:	bd08      	pop	{r3, pc}
 80a0344:	080601c8 	.word	0x080601c8

080a0348 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0348:	b508      	push	{r3, lr}
 80a034a:	4b02      	ldr	r3, [pc, #8]	; (80a0354 <network_ready+0xc>)
 80a034c:	681b      	ldr	r3, [r3, #0]
 80a034e:	691b      	ldr	r3, [r3, #16]
 80a0350:	9301      	str	r3, [sp, #4]
 80a0352:	bd08      	pop	{r3, pc}
 80a0354:	080601c8 	.word	0x080601c8

080a0358 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0358:	b508      	push	{r3, lr}
 80a035a:	4b02      	ldr	r3, [pc, #8]	; (80a0364 <network_on+0xc>)
 80a035c:	681b      	ldr	r3, [r3, #0]
 80a035e:	695b      	ldr	r3, [r3, #20]
 80a0360:	9301      	str	r3, [sp, #4]
 80a0362:	bd08      	pop	{r3, pc}
 80a0364:	080601c8 	.word	0x080601c8

080a0368 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0368:	b508      	push	{r3, lr}
 80a036a:	4b02      	ldr	r3, [pc, #8]	; (80a0374 <network_off+0xc>)
 80a036c:	681b      	ldr	r3, [r3, #0]
 80a036e:	699b      	ldr	r3, [r3, #24]
 80a0370:	9301      	str	r3, [sp, #4]
 80a0372:	bd08      	pop	{r3, pc}
 80a0374:	080601c8 	.word	0x080601c8

080a0378 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0378:	b508      	push	{r3, lr}
 80a037a:	4b02      	ldr	r3, [pc, #8]	; (80a0384 <network_listen+0xc>)
 80a037c:	681b      	ldr	r3, [r3, #0]
 80a037e:	69db      	ldr	r3, [r3, #28]
 80a0380:	9301      	str	r3, [sp, #4]
 80a0382:	bd08      	pop	{r3, pc}
 80a0384:	080601c8 	.word	0x080601c8

080a0388 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0388:	b508      	push	{r3, lr}
 80a038a:	4b02      	ldr	r3, [pc, #8]	; (80a0394 <network_listening+0xc>)
 80a038c:	681b      	ldr	r3, [r3, #0]
 80a038e:	6a1b      	ldr	r3, [r3, #32]
 80a0390:	9301      	str	r3, [sp, #4]
 80a0392:	bd08      	pop	{r3, pc}
 80a0394:	080601c8 	.word	0x080601c8

080a0398 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0398:	b508      	push	{r3, lr}
 80a039a:	4b02      	ldr	r3, [pc, #8]	; (80a03a4 <network_set_listen_timeout+0xc>)
 80a039c:	681b      	ldr	r3, [r3, #0]
 80a039e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a03a0:	9301      	str	r3, [sp, #4]
 80a03a2:	bd08      	pop	{r3, pc}
 80a03a4:	080601c8 	.word	0x080601c8

080a03a8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a03a8:	b508      	push	{r3, lr}
 80a03aa:	4b02      	ldr	r3, [pc, #8]	; (80a03b4 <network_get_listen_timeout+0xc>)
 80a03ac:	681b      	ldr	r3, [r3, #0]
 80a03ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a03b0:	9301      	str	r3, [sp, #4]
 80a03b2:	bd08      	pop	{r3, pc}
 80a03b4:	080601c8 	.word	0x080601c8

080a03b8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a03b8:	b508      	push	{r3, lr}
 80a03ba:	4b02      	ldr	r3, [pc, #8]	; (80a03c4 <malloc+0xc>)
 80a03bc:	681b      	ldr	r3, [r3, #0]
 80a03be:	681b      	ldr	r3, [r3, #0]
 80a03c0:	9301      	str	r3, [sp, #4]
 80a03c2:	bd08      	pop	{r3, pc}
 80a03c4:	080601a0 	.word	0x080601a0

080a03c8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a03c8:	b508      	push	{r3, lr}
 80a03ca:	4b02      	ldr	r3, [pc, #8]	; (80a03d4 <free+0xc>)
 80a03cc:	681b      	ldr	r3, [r3, #0]
 80a03ce:	685b      	ldr	r3, [r3, #4]
 80a03d0:	9301      	str	r3, [sp, #4]
 80a03d2:	bd08      	pop	{r3, pc}
 80a03d4:	080601a0 	.word	0x080601a0

080a03d8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a03d8:	2100      	movs	r1, #0
 80a03da:	f7ff bf79 	b.w	80a02d0 <system_delay_ms>

080a03de <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a03de:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a03e0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a03e2:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a03e4:	b113      	cbz	r3, 80a03ec <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a03e6:	2203      	movs	r2, #3
 80a03e8:	4601      	mov	r1, r0
 80a03ea:	4798      	blx	r3
    }
 80a03ec:	4620      	mov	r0, r4
 80a03ee:	bd10      	pop	{r4, pc}

080a03f0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a03f0:	4770      	bx	lr

080a03f2 <_ZN9IPAddressD0Ev>:
 80a03f2:	b510      	push	{r4, lr}
 80a03f4:	4604      	mov	r4, r0
 80a03f6:	f7ff fe52 	bl	80a009e <_ZdlPv>
 80a03fa:	4620      	mov	r0, r4
 80a03fc:	bd10      	pop	{r4, pc}

080a03fe <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a03fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0400:	460f      	mov	r7, r1
 80a0402:	f100 0608 	add.w	r6, r0, #8
 80a0406:	1d05      	adds	r5, r0, #4
 80a0408:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a040a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a040e:	220a      	movs	r2, #10
 80a0410:	4638      	mov	r0, r7
 80a0412:	f000 f92a 	bl	80a066a <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0416:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0418:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a041a:	d007      	beq.n	80a042c <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a041c:	2c00      	cmp	r4, #0
 80a041e:	d0f4      	beq.n	80a040a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0420:	212e      	movs	r1, #46	; 0x2e
 80a0422:	4638      	mov	r0, r7
 80a0424:	f000 f8de 	bl	80a05e4 <_ZN5Print5printEc>
 80a0428:	4404      	add	r4, r0
 80a042a:	e7ee      	b.n	80a040a <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a042c:	4620      	mov	r0, r4
 80a042e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0430 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0430:	b510      	push	{r4, lr}
 80a0432:	4604      	mov	r4, r0
 80a0434:	4b04      	ldr	r3, [pc, #16]	; (80a0448 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0436:	2211      	movs	r2, #17
 80a0438:	f840 3b04 	str.w	r3, [r0], #4
 80a043c:	2100      	movs	r1, #0
 80a043e:	f000 fd52 	bl	80a0ee6 <memset>
{
    clear();
}
 80a0442:	4620      	mov	r0, r4
 80a0444:	bd10      	pop	{r4, pc}
 80a0446:	bf00      	nop
 80a0448:	080a10bc 	.word	0x080a10bc

080a044c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a044c:	4603      	mov	r3, r0
 80a044e:	4a07      	ldr	r2, [pc, #28]	; (80a046c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0450:	b510      	push	{r4, lr}
 80a0452:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0456:	f101 0210 	add.w	r2, r1, #16
 80a045a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a045e:	4291      	cmp	r1, r2
 80a0460:	f843 4b04 	str.w	r4, [r3], #4
 80a0464:	d1f9      	bne.n	80a045a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0466:	780a      	ldrb	r2, [r1, #0]
 80a0468:	701a      	strb	r2, [r3, #0]
}
 80a046a:	bd10      	pop	{r4, pc}
 80a046c:	080a10bc 	.word	0x080a10bc

080a0470 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0470:	4a02      	ldr	r2, [pc, #8]	; (80a047c <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0472:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0474:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0476:	2204      	movs	r2, #4
 80a0478:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a047a:	4770      	bx	lr
 80a047c:	080a10bc 	.word	0x080a10bc

080a0480 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0480:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0482:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0486:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a048a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a048e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0492:	2304      	movs	r3, #4
 80a0494:	6041      	str	r1, [r0, #4]
 80a0496:	7503      	strb	r3, [r0, #20]
 80a0498:	bd10      	pop	{r4, pc}
	...

080a049c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a049c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a049e:	4d04      	ldr	r5, [pc, #16]	; (80a04b0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a04a0:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a04a2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a04a6:	9500      	str	r5, [sp, #0]
 80a04a8:	f7ff ffea 	bl	80a0480 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a04ac:	b003      	add	sp, #12
 80a04ae:	bd30      	pop	{r4, r5, pc}
 80a04b0:	080a10bc 	.word	0x080a10bc

080a04b4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a04b4:	4a01      	ldr	r2, [pc, #4]	; (80a04bc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a04b6:	4b02      	ldr	r3, [pc, #8]	; (80a04c0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a04b8:	601a      	str	r2, [r3, #0]
 80a04ba:	4770      	bx	lr
 80a04bc:	080a1183 	.word	0x080a1183
 80a04c0:	20000370 	.word	0x20000370

080a04c4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a04c4:	2300      	movs	r3, #0
 80a04c6:	461a      	mov	r2, r3
 80a04c8:	6840      	ldr	r0, [r0, #4]
 80a04ca:	f7ff bf25 	b.w	80a0318 <network_connect>

080a04ce <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a04ce:	2200      	movs	r2, #0
 80a04d0:	2102      	movs	r1, #2
 80a04d2:	6840      	ldr	r0, [r0, #4]
 80a04d4:	f7ff bf30 	b.w	80a0338 <network_disconnect>

080a04d8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a04d8:	2200      	movs	r2, #0
 80a04da:	4611      	mov	r1, r2
 80a04dc:	6840      	ldr	r0, [r0, #4]
 80a04de:	f7ff bf23 	b.w	80a0328 <network_connecting>

080a04e2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a04e2:	2200      	movs	r2, #0
 80a04e4:	4611      	mov	r1, r2
 80a04e6:	6840      	ldr	r0, [r0, #4]
 80a04e8:	f7ff bf2e 	b.w	80a0348 <network_ready>

080a04ec <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a04ec:	2300      	movs	r3, #0
 80a04ee:	461a      	mov	r2, r3
 80a04f0:	4619      	mov	r1, r3
 80a04f2:	6840      	ldr	r0, [r0, #4]
 80a04f4:	f7ff bf30 	b.w	80a0358 <network_on>

080a04f8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a04f8:	2300      	movs	r3, #0
 80a04fa:	461a      	mov	r2, r3
 80a04fc:	4619      	mov	r1, r3
 80a04fe:	6840      	ldr	r0, [r0, #4]
 80a0500:	f7ff bf32 	b.w	80a0368 <network_off>

080a0504 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0504:	2200      	movs	r2, #0
 80a0506:	f081 0101 	eor.w	r1, r1, #1
 80a050a:	6840      	ldr	r0, [r0, #4]
 80a050c:	f7ff bf34 	b.w	80a0378 <network_listen>

080a0510 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0510:	2200      	movs	r2, #0
 80a0512:	6840      	ldr	r0, [r0, #4]
 80a0514:	f7ff bf40 	b.w	80a0398 <network_set_listen_timeout>

080a0518 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0518:	2200      	movs	r2, #0
 80a051a:	4611      	mov	r1, r2
 80a051c:	6840      	ldr	r0, [r0, #4]
 80a051e:	f7ff bf43 	b.w	80a03a8 <network_get_listen_timeout>

080a0522 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0522:	2200      	movs	r2, #0
 80a0524:	4611      	mov	r1, r2
 80a0526:	6840      	ldr	r0, [r0, #4]
 80a0528:	f7ff bf2e 	b.w	80a0388 <network_listening>

080a052c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a052c:	b570      	push	{r4, r5, r6, lr}
 80a052e:	4616      	mov	r6, r2
 80a0530:	b08e      	sub	sp, #56	; 0x38
 80a0532:	4604      	mov	r4, r0
    IPAddress addr;
 80a0534:	a808      	add	r0, sp, #32
 80a0536:	f7ff ff7b 	bl	80a0430 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a053a:	2211      	movs	r2, #17
 80a053c:	2100      	movs	r1, #0
 80a053e:	a803      	add	r0, sp, #12
 80a0540:	f000 fcd1 	bl	80a0ee6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0544:	4630      	mov	r0, r6
 80a0546:	f000 fcff 	bl	80a0f48 <strlen>
 80a054a:	2500      	movs	r5, #0
 80a054c:	4b0a      	ldr	r3, [pc, #40]	; (80a0578 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a054e:	9500      	str	r5, [sp, #0]
 80a0550:	b281      	uxth	r1, r0
 80a0552:	685b      	ldr	r3, [r3, #4]
 80a0554:	aa03      	add	r2, sp, #12
 80a0556:	4630      	mov	r0, r6
 80a0558:	f7ff feaa 	bl	80a02b0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a055c:	b120      	cbz	r0, 80a0568 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a055e:	4629      	mov	r1, r5
 80a0560:	4620      	mov	r0, r4
 80a0562:	f7ff ff85 	bl	80a0470 <_ZN9IPAddressC1Em>
 80a0566:	e003      	b.n	80a0570 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0568:	a903      	add	r1, sp, #12
 80a056a:	4620      	mov	r0, r4
 80a056c:	f7ff ff6e 	bl	80a044c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0570:	4620      	mov	r0, r4
 80a0572:	b00e      	add	sp, #56	; 0x38
 80a0574:	bd70      	pop	{r4, r5, r6, pc}
 80a0576:	bf00      	nop
 80a0578:	200003e8 	.word	0x200003e8

080a057c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a057c:	4b02      	ldr	r3, [pc, #8]	; (80a0588 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a057e:	4a03      	ldr	r2, [pc, #12]	; (80a058c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0580:	601a      	str	r2, [r3, #0]
 80a0582:	2200      	movs	r2, #0
 80a0584:	605a      	str	r2, [r3, #4]
 80a0586:	4770      	bx	lr
 80a0588:	20000374 	.word	0x20000374
 80a058c:	080a11b4 	.word	0x080a11b4

080a0590 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0592:	4606      	mov	r6, r0
 80a0594:	460d      	mov	r5, r1
 80a0596:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0598:	2400      	movs	r4, #0
  while (size--) {
 80a059a:	42bd      	cmp	r5, r7
 80a059c:	d00c      	beq.n	80a05b8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a059e:	6833      	ldr	r3, [r6, #0]
 80a05a0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a05a4:	689b      	ldr	r3, [r3, #8]
 80a05a6:	4630      	mov	r0, r6
 80a05a8:	4798      	blx	r3
     if (chunk>=0)
 80a05aa:	2800      	cmp	r0, #0
 80a05ac:	db01      	blt.n	80a05b2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a05ae:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a05b0:	e7f3      	b.n	80a059a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a05b2:	2c00      	cmp	r4, #0
 80a05b4:	bf08      	it	eq
 80a05b6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a05b8:	4620      	mov	r0, r4
 80a05ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a05bc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a05bc:	b570      	push	{r4, r5, r6, lr}
 80a05be:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a05c0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a05c2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a05c4:	b149      	cbz	r1, 80a05da <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a05c6:	f000 fcbf 	bl	80a0f48 <strlen>
 80a05ca:	682b      	ldr	r3, [r5, #0]
 80a05cc:	4602      	mov	r2, r0
 80a05ce:	4621      	mov	r1, r4
 80a05d0:	4628      	mov	r0, r5
    }
 80a05d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a05d6:	68db      	ldr	r3, [r3, #12]
 80a05d8:	4718      	bx	r3
    }
 80a05da:	bd70      	pop	{r4, r5, r6, pc}

080a05dc <_ZN5Print5printEPKc>:
 80a05dc:	b508      	push	{r3, lr}
 80a05de:	f7ff ffed 	bl	80a05bc <_ZN5Print5writeEPKc>
 80a05e2:	bd08      	pop	{r3, pc}

080a05e4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a05e4:	6803      	ldr	r3, [r0, #0]
 80a05e6:	689b      	ldr	r3, [r3, #8]
 80a05e8:	4718      	bx	r3

080a05ea <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a05ea:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a05ec:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a05ee:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a05f0:	f7ff fff8 	bl	80a05e4 <_ZN5Print5printEc>
  n += print('\n');
 80a05f4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a05f6:	4604      	mov	r4, r0
  n += print('\n');
 80a05f8:	4628      	mov	r0, r5
 80a05fa:	f7ff fff3 	bl	80a05e4 <_ZN5Print5printEc>
  return n;
}
 80a05fe:	4420      	add	r0, r4
 80a0600:	bd38      	pop	{r3, r4, r5, pc}

080a0602 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0602:	b538      	push	{r3, r4, r5, lr}
 80a0604:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0606:	f7ff ffd9 	bl	80a05bc <_ZN5Print5writeEPKc>
 80a060a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a060c:	4628      	mov	r0, r5
 80a060e:	f7ff ffec 	bl	80a05ea <_ZN5Print7printlnEv>
  return n;
}
 80a0612:	4420      	add	r0, r4
 80a0614:	bd38      	pop	{r3, r4, r5, pc}

080a0616 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0616:	2a01      	cmp	r2, #1
 80a0618:	bf98      	it	ls
 80a061a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a061c:	b530      	push	{r4, r5, lr}
 80a061e:	460b      	mov	r3, r1
 80a0620:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0622:	2100      	movs	r1, #0
 80a0624:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0628:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a062c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0630:	fb05 3312 	mls	r3, r5, r2, r3
 80a0634:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0636:	2b09      	cmp	r3, #9
 80a0638:	bf94      	ite	ls
 80a063a:	3330      	addls	r3, #48	; 0x30
 80a063c:	3337      	addhi	r3, #55	; 0x37
 80a063e:	b2db      	uxtb	r3, r3
 80a0640:	4621      	mov	r1, r4
 80a0642:	f804 3901 	strb.w	r3, [r4], #-1
 80a0646:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0648:	2d00      	cmp	r5, #0
 80a064a:	d1ef      	bne.n	80a062c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a064c:	f7ff ffb6 	bl	80a05bc <_ZN5Print5writeEPKc>
}
 80a0650:	b00b      	add	sp, #44	; 0x2c
 80a0652:	bd30      	pop	{r4, r5, pc}

080a0654 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0654:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0656:	b922      	cbnz	r2, 80a0662 <_ZN5Print5printEmi+0xe>
 80a0658:	6803      	ldr	r3, [r0, #0]
 80a065a:	b2c9      	uxtb	r1, r1
 80a065c:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a065e:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0660:	4718      	bx	r3
  else return printNumber(n, base);
 80a0662:	b2d2      	uxtb	r2, r2
}
 80a0664:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0666:	f7ff bfd6 	b.w	80a0616 <_ZN5Print11printNumberEmh>

080a066a <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a066a:	f7ff bff3 	b.w	80a0654 <_ZN5Print5printEmi>

080a066e <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a066e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0672:	4607      	mov	r7, r0
 80a0674:	460e      	mov	r6, r1
  if (base == 0) {
 80a0676:	4615      	mov	r5, r2
 80a0678:	b92a      	cbnz	r2, 80a0686 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a067a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a067e:	6803      	ldr	r3, [r0, #0]
 80a0680:	b2c9      	uxtb	r1, r1
 80a0682:	689b      	ldr	r3, [r3, #8]
 80a0684:	4718      	bx	r3
  } else if (base == 10) {
 80a0686:	2a0a      	cmp	r2, #10
 80a0688:	d102      	bne.n	80a0690 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a068a:	2900      	cmp	r1, #0
 80a068c:	da01      	bge.n	80a0692 <_ZN5Print5printEli+0x24>
 80a068e:	e004      	b.n	80a069a <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a0690:	b2d2      	uxtb	r2, r2
  }
}
 80a0692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a0696:	f7ff bfbe 	b.w	80a0616 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a069a:	212d      	movs	r1, #45	; 0x2d
 80a069c:	f7ff ffa2 	bl	80a05e4 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a06a0:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a06a2:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a06a4:	4271      	negs	r1, r6
 80a06a6:	4638      	mov	r0, r7
 80a06a8:	f7ff ffb5 	bl	80a0616 <_ZN5Print11printNumberEmh>
 80a06ac:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a06ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a06b2 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a06b2:	b538      	push	{r3, r4, r5, lr}
 80a06b4:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a06b6:	f7ff ffda 	bl	80a066e <_ZN5Print5printEli>
 80a06ba:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a06bc:	4628      	mov	r0, r5
 80a06be:	f7ff ff94 	bl	80a05ea <_ZN5Print7printlnEv>
  return n;
}
 80a06c2:	4420      	add	r0, r4
 80a06c4:	bd38      	pop	{r3, r4, r5, pc}

080a06c6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a06c6:	b510      	push	{r4, lr}
 80a06c8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a06ca:	f7ff fe88 	bl	80a03de <_ZNSt14_Function_baseD1Ev>
 80a06ce:	4620      	mov	r0, r4
 80a06d0:	bd10      	pop	{r4, pc}
	...

080a06d4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a06d4:	4803      	ldr	r0, [pc, #12]	; (80a06e4 <_GLOBAL__sub_I_RGB+0x10>)
 80a06d6:	2300      	movs	r3, #0
 80a06d8:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a06da:	4a03      	ldr	r2, [pc, #12]	; (80a06e8 <_GLOBAL__sub_I_RGB+0x14>)
 80a06dc:	4903      	ldr	r1, [pc, #12]	; (80a06ec <_GLOBAL__sub_I_RGB+0x18>)
 80a06de:	f000 ba97 	b.w	80a0c10 <__aeabi_atexit>
 80a06e2:	bf00      	nop
 80a06e4:	2000037c 	.word	0x2000037c
 80a06e8:	2000036c 	.word	0x2000036c
 80a06ec:	080a06c7 	.word	0x080a06c7

080a06f0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a06f0:	4770      	bx	lr

080a06f2 <_ZN8SPIClassD0Ev>:
 80a06f2:	b510      	push	{r4, lr}
 80a06f4:	4604      	mov	r4, r0
 80a06f6:	f7ff fcd2 	bl	80a009e <_ZdlPv>
 80a06fa:	4620      	mov	r0, r4
 80a06fc:	bd10      	pop	{r4, pc}
	...

080a0700 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0700:	b570      	push	{r4, r5, r6, lr}
 80a0702:	4604      	mov	r4, r0
 80a0704:	460e      	mov	r6, r1
 80a0706:	4b07      	ldr	r3, [pc, #28]	; (80a0724 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0708:	2500      	movs	r5, #0
 80a070a:	6003      	str	r3, [r0, #0]
 80a070c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0710:	f7ff fd2e 	bl	80a0170 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0714:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0716:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0718:	f7ff fd4a 	bl	80a01b0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a071c:	60a5      	str	r5, [r4, #8]
}
 80a071e:	4620      	mov	r0, r4
 80a0720:	bd70      	pop	{r4, r5, r6, pc}
 80a0722:	bf00      	nop
 80a0724:	080a11e8 	.word	0x080a11e8

080a0728 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a072c:	4b03      	ldr	r3, [pc, #12]	; (80a073c <_GLOBAL__sub_I_System+0x14>)
 80a072e:	2000      	movs	r0, #0
 80a0730:	7018      	strb	r0, [r3, #0]
 80a0732:	8058      	strh	r0, [r3, #2]
 80a0734:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0736:	f7ff bdc3 	b.w	80a02c0 <set_system_mode>
 80a073a:	bf00      	nop
 80a073c:	2000038c 	.word	0x2000038c

080a0740 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0740:	4b02      	ldr	r3, [pc, #8]	; (80a074c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0742:	681a      	ldr	r2, [r3, #0]
 80a0744:	4b02      	ldr	r3, [pc, #8]	; (80a0750 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0746:	601a      	str	r2, [r3, #0]
 80a0748:	4770      	bx	lr
 80a074a:	bf00      	nop
 80a074c:	20000300 	.word	0x20000300
 80a0750:	20000394 	.word	0x20000394

080a0754 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0754:	4770      	bx	lr

080a0756 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0756:	7441      	strb	r1, [r0, #17]
 80a0758:	4770      	bx	lr

080a075a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a075a:	7c00      	ldrb	r0, [r0, #16]
 80a075c:	f7ff bd60 	b.w	80a0220 <HAL_USART_Available_Data_For_Write>

080a0760 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a0760:	7c00      	ldrb	r0, [r0, #16]
 80a0762:	f7ff bd3d 	b.w	80a01e0 <HAL_USART_Available_Data>

080a0766 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a0766:	7c00      	ldrb	r0, [r0, #16]
 80a0768:	f7ff bd4a 	b.w	80a0200 <HAL_USART_Peek_Data>

080a076c <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a076c:	7c00      	ldrb	r0, [r0, #16]
 80a076e:	f7ff bd3f 	b.w	80a01f0 <HAL_USART_Read_Data>

080a0772 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0772:	7c00      	ldrb	r0, [r0, #16]
 80a0774:	f7ff bd4c 	b.w	80a0210 <HAL_USART_Flush_Data>

080a0778 <_ZN11USARTSerialD0Ev>:
 80a0778:	b510      	push	{r4, lr}
 80a077a:	4604      	mov	r4, r0
 80a077c:	f7ff fc8f 	bl	80a009e <_ZdlPv>
 80a0780:	4620      	mov	r0, r4
 80a0782:	bd10      	pop	{r4, pc}

080a0784 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0784:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0786:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0788:	4604      	mov	r4, r0
 80a078a:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a078c:	b925      	cbnz	r5, 80a0798 <_ZN11USARTSerial5writeEh+0x14>
 80a078e:	7c00      	ldrb	r0, [r0, #16]
 80a0790:	f7ff fd46 	bl	80a0220 <HAL_USART_Available_Data_For_Write>
 80a0794:	2800      	cmp	r0, #0
 80a0796:	dd05      	ble.n	80a07a4 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0798:	4631      	mov	r1, r6
 80a079a:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a079c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a07a0:	f7ff bd16 	b.w	80a01d0 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a07a4:	4628      	mov	r0, r5
 80a07a6:	bd70      	pop	{r4, r5, r6, pc}

080a07a8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a07a8:	b510      	push	{r4, lr}
 80a07aa:	4604      	mov	r4, r0
 80a07ac:	4608      	mov	r0, r1
 80a07ae:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a07b0:	2200      	movs	r2, #0
 80a07b2:	6062      	str	r2, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a07b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a07b8:	60a2      	str	r2, [r4, #8]
 80a07ba:	4a05      	ldr	r2, [pc, #20]	; (80a07d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a07bc:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a07be:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a07c0:	2201      	movs	r2, #1
 80a07c2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a07c4:	461a      	mov	r2, r3
 80a07c6:	f7ff fcfb 	bl	80a01c0 <HAL_USART_Init>
}
 80a07ca:	4620      	mov	r0, r4
 80a07cc:	bd10      	pop	{r4, pc}
 80a07ce:	bf00      	nop
 80a07d0:	080a1224 	.word	0x080a1224

080a07d4 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80a07d4:	2300      	movs	r3, #0
 80a07d6:	7c00      	ldrb	r0, [r0, #16]
 80a07d8:	f7ff bd2a 	b.w	80a0230 <HAL_USART_BeginConfig>

080a07dc <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80a07dc:	2200      	movs	r2, #0
 80a07de:	f7ff bff9 	b.w	80a07d4 <_ZN11USARTSerial5beginEmm>
	...

080a07e4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a07e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a07e6:	4c19      	ldr	r4, [pc, #100]	; (80a084c <_Z22__fetch_global_Serial1v+0x68>)
 80a07e8:	6825      	ldr	r5, [r4, #0]
 80a07ea:	b94d      	cbnz	r5, 80a0800 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a07ec:	2084      	movs	r0, #132	; 0x84
 80a07ee:	f7ff fc54 	bl	80a009a <_Znwj>
 80a07f2:	4606      	mov	r6, r0
 80a07f4:	b118      	cbz	r0, 80a07fe <_Z22__fetch_global_Serial1v+0x1a>
 80a07f6:	2284      	movs	r2, #132	; 0x84
 80a07f8:	4629      	mov	r1, r5
 80a07fa:	f000 fb74 	bl	80a0ee6 <memset>
 80a07fe:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a0800:	4d13      	ldr	r5, [pc, #76]	; (80a0850 <_Z22__fetch_global_Serial1v+0x6c>)
 80a0802:	682e      	ldr	r6, [r5, #0]
 80a0804:	b94e      	cbnz	r6, 80a081a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a0806:	2084      	movs	r0, #132	; 0x84
 80a0808:	f7ff fc47 	bl	80a009a <_Znwj>
 80a080c:	4607      	mov	r7, r0
 80a080e:	b118      	cbz	r0, 80a0818 <_Z22__fetch_global_Serial1v+0x34>
 80a0810:	2284      	movs	r2, #132	; 0x84
 80a0812:	4631      	mov	r1, r6
 80a0814:	f000 fb67 	bl	80a0ee6 <memset>
 80a0818:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a081a:	4f0e      	ldr	r7, [pc, #56]	; (80a0854 <_Z22__fetch_global_Serial1v+0x70>)
 80a081c:	6839      	ldr	r1, [r7, #0]
 80a081e:	f011 0601 	ands.w	r6, r1, #1
 80a0822:	d111      	bne.n	80a0848 <_Z22__fetch_global_Serial1v+0x64>
 80a0824:	4638      	mov	r0, r7
 80a0826:	f7ff fc3c 	bl	80a00a2 <__cxa_guard_acquire>
 80a082a:	b168      	cbz	r0, 80a0848 <_Z22__fetch_global_Serial1v+0x64>
 80a082c:	6822      	ldr	r2, [r4, #0]
 80a082e:	4631      	mov	r1, r6
 80a0830:	682b      	ldr	r3, [r5, #0]
 80a0832:	4809      	ldr	r0, [pc, #36]	; (80a0858 <_Z22__fetch_global_Serial1v+0x74>)
 80a0834:	f7ff ffb8 	bl	80a07a8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0838:	4638      	mov	r0, r7
 80a083a:	f7ff fc37 	bl	80a00ac <__cxa_guard_release>
 80a083e:	4a07      	ldr	r2, [pc, #28]	; (80a085c <_Z22__fetch_global_Serial1v+0x78>)
 80a0840:	4907      	ldr	r1, [pc, #28]	; (80a0860 <_Z22__fetch_global_Serial1v+0x7c>)
 80a0842:	4805      	ldr	r0, [pc, #20]	; (80a0858 <_Z22__fetch_global_Serial1v+0x74>)
 80a0844:	f000 f9e4 	bl	80a0c10 <__aeabi_atexit>
#endif
	return serial1;
}
 80a0848:	4803      	ldr	r0, [pc, #12]	; (80a0858 <_Z22__fetch_global_Serial1v+0x74>)
 80a084a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a084c:	200003b4 	.word	0x200003b4
 80a0850:	200003ac 	.word	0x200003ac
 80a0854:	200003b0 	.word	0x200003b0
 80a0858:	20000398 	.word	0x20000398
 80a085c:	2000036c 	.word	0x2000036c
 80a0860:	080a0755 	.word	0x080a0755

080a0864 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0864:	7441      	strb	r1, [r0, #17]
 80a0866:	4770      	bx	lr

080a0868 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0868:	4770      	bx	lr

080a086a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a086a:	2100      	movs	r1, #0
 80a086c:	7c00      	ldrb	r0, [r0, #16]
 80a086e:	f7ff bd07 	b.w	80a0280 <HAL_USB_USART_Receive_Data>

080a0872 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a0872:	2101      	movs	r1, #1
 80a0874:	7c00      	ldrb	r0, [r0, #16]
 80a0876:	f7ff bd03 	b.w	80a0280 <HAL_USB_USART_Receive_Data>

080a087a <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a087a:	7c00      	ldrb	r0, [r0, #16]
 80a087c:	f7ff bcf8 	b.w	80a0270 <HAL_USB_USART_Available_Data_For_Write>

080a0880 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a0880:	7c00      	ldrb	r0, [r0, #16]
 80a0882:	f7ff bced 	b.w	80a0260 <HAL_USB_USART_Available_Data>

080a0886 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a0886:	b538      	push	{r3, r4, r5, lr}
 80a0888:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a088a:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a088c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a088e:	f7ff fcef 	bl	80a0270 <HAL_USB_USART_Available_Data_For_Write>
 80a0892:	2800      	cmp	r0, #0
 80a0894:	dc01      	bgt.n	80a089a <_ZN9USBSerial5writeEh+0x14>
 80a0896:	7c60      	ldrb	r0, [r4, #17]
 80a0898:	b120      	cbz	r0, 80a08a4 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a089a:	4629      	mov	r1, r5
 80a089c:	7c20      	ldrb	r0, [r4, #16]
 80a089e:	f7ff fcf7 	bl	80a0290 <HAL_USB_USART_Send_Data>
    return 1;
 80a08a2:	2001      	movs	r0, #1
  }
  return 0;
}
 80a08a4:	bd38      	pop	{r3, r4, r5, pc}

080a08a6 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a08a6:	7c00      	ldrb	r0, [r0, #16]
 80a08a8:	f7ff bcfa 	b.w	80a02a0 <HAL_USB_USART_Flush_Data>

080a08ac <_ZN9USBSerialD0Ev>:
 80a08ac:	b510      	push	{r4, lr}
 80a08ae:	4604      	mov	r4, r0
 80a08b0:	f7ff fbf5 	bl	80a009e <_ZdlPv>
 80a08b4:	4620      	mov	r0, r4
 80a08b6:	bd10      	pop	{r4, pc}

080a08b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a08b8:	b510      	push	{r4, lr}
 80a08ba:	4604      	mov	r4, r0
 80a08bc:	2300      	movs	r3, #0
 80a08be:	6063      	str	r3, [r4, #4]
 80a08c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a08c4:	60a3      	str	r3, [r4, #8]
 80a08c6:	4b05      	ldr	r3, [pc, #20]	; (80a08dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a08c8:	4608      	mov	r0, r1
 80a08ca:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a08cc:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a08ce:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a08d0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a08d2:	4611      	mov	r1, r2
 80a08d4:	f7ff fcb4 	bl	80a0240 <HAL_USB_USART_Init>
}
 80a08d8:	4620      	mov	r0, r4
 80a08da:	bd10      	pop	{r4, pc}
 80a08dc:	080a1254 	.word	0x080a1254

080a08e0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a08e0:	2200      	movs	r2, #0
 80a08e2:	7c00      	ldrb	r0, [r0, #16]
 80a08e4:	f7ff bcb4 	b.w	80a0250 <HAL_USB_USART_Begin>

080a08e8 <_Z19acquireSerialBufferv>:
 80a08e8:	b510      	push	{r4, lr}
 80a08ea:	4604      	mov	r4, r0
 80a08ec:	2214      	movs	r2, #20
 80a08ee:	2100      	movs	r1, #0
 80a08f0:	f000 faf9 	bl	80a0ee6 <memset>
 80a08f4:	4620      	mov	r0, r4
 80a08f6:	bd10      	pop	{r4, pc}

080a08f8 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a08f8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a08fa:	4d0e      	ldr	r5, [pc, #56]	; (80a0934 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a08fc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a08fe:	a801      	add	r0, sp, #4
 80a0900:	f7ff fff2 	bl	80a08e8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0904:	6829      	ldr	r1, [r5, #0]
 80a0906:	f011 0401 	ands.w	r4, r1, #1
 80a090a:	d110      	bne.n	80a092e <_Z16_fetch_usbserialv+0x36>
 80a090c:	4628      	mov	r0, r5
 80a090e:	f7ff fbc8 	bl	80a00a2 <__cxa_guard_acquire>
 80a0912:	b160      	cbz	r0, 80a092e <_Z16_fetch_usbserialv+0x36>
 80a0914:	aa01      	add	r2, sp, #4
 80a0916:	4621      	mov	r1, r4
 80a0918:	4807      	ldr	r0, [pc, #28]	; (80a0938 <_Z16_fetch_usbserialv+0x40>)
 80a091a:	f7ff ffcd 	bl	80a08b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a091e:	4628      	mov	r0, r5
 80a0920:	f7ff fbc4 	bl	80a00ac <__cxa_guard_release>
 80a0924:	4a05      	ldr	r2, [pc, #20]	; (80a093c <_Z16_fetch_usbserialv+0x44>)
 80a0926:	4906      	ldr	r1, [pc, #24]	; (80a0940 <_Z16_fetch_usbserialv+0x48>)
 80a0928:	4803      	ldr	r0, [pc, #12]	; (80a0938 <_Z16_fetch_usbserialv+0x40>)
 80a092a:	f000 f971 	bl	80a0c10 <__aeabi_atexit>
	return _usbserial;
}
 80a092e:	4802      	ldr	r0, [pc, #8]	; (80a0938 <_Z16_fetch_usbserialv+0x40>)
 80a0930:	b007      	add	sp, #28
 80a0932:	bd30      	pop	{r4, r5, pc}
 80a0934:	200003b8 	.word	0x200003b8
 80a0938:	200003c0 	.word	0x200003c0
 80a093c:	2000036c 	.word	0x2000036c
 80a0940:	080a0869 	.word	0x080a0869

080a0944 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0944:	b510      	push	{r4, lr}
 80a0946:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0948:	2214      	movs	r2, #20
 80a094a:	2100      	movs	r1, #0
 80a094c:	f000 facb 	bl	80a0ee6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0950:	4620      	mov	r0, r4
 80a0952:	bd10      	pop	{r4, pc}

080a0954 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0954:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0956:	4c0e      	ldr	r4, [pc, #56]	; (80a0990 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0958:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a095a:	a801      	add	r0, sp, #4
 80a095c:	f7ff fff2 	bl	80a0944 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0960:	6823      	ldr	r3, [r4, #0]
 80a0962:	07db      	lsls	r3, r3, #31
 80a0964:	d410      	bmi.n	80a0988 <_Z17_fetch_usbserial1v+0x34>
 80a0966:	4620      	mov	r0, r4
 80a0968:	f7ff fb9b 	bl	80a00a2 <__cxa_guard_acquire>
 80a096c:	b160      	cbz	r0, 80a0988 <_Z17_fetch_usbserial1v+0x34>
 80a096e:	aa01      	add	r2, sp, #4
 80a0970:	2101      	movs	r1, #1
 80a0972:	4808      	ldr	r0, [pc, #32]	; (80a0994 <_Z17_fetch_usbserial1v+0x40>)
 80a0974:	f7ff ffa0 	bl	80a08b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0978:	4620      	mov	r0, r4
 80a097a:	f7ff fb97 	bl	80a00ac <__cxa_guard_release>
 80a097e:	4a06      	ldr	r2, [pc, #24]	; (80a0998 <_Z17_fetch_usbserial1v+0x44>)
 80a0980:	4906      	ldr	r1, [pc, #24]	; (80a099c <_Z17_fetch_usbserial1v+0x48>)
 80a0982:	4804      	ldr	r0, [pc, #16]	; (80a0994 <_Z17_fetch_usbserial1v+0x40>)
 80a0984:	f000 f944 	bl	80a0c10 <__aeabi_atexit>
  return _usbserial1;
}
 80a0988:	4802      	ldr	r0, [pc, #8]	; (80a0994 <_Z17_fetch_usbserial1v+0x40>)
 80a098a:	b006      	add	sp, #24
 80a098c:	bd10      	pop	{r4, pc}
 80a098e:	bf00      	nop
 80a0990:	200003bc 	.word	0x200003bc
 80a0994:	200003d4 	.word	0x200003d4
 80a0998:	2000036c 	.word	0x2000036c
 80a099c:	080a0869 	.word	0x080a0869

080a09a0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a09a0:	2200      	movs	r2, #0
 80a09a2:	4611      	mov	r1, r2
 80a09a4:	6840      	ldr	r0, [r0, #4]
 80a09a6:	f7ff bccf 	b.w	80a0348 <network_ready>

080a09aa <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a09aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a09ac:	4616      	mov	r6, r2
 80a09ae:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a09b0:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a09b2:	460f      	mov	r7, r1
 80a09b4:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a09b6:	2100      	movs	r1, #0
 80a09b8:	a803      	add	r0, sp, #12
 80a09ba:	f000 fa94 	bl	80a0ee6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a09be:	4630      	mov	r0, r6
 80a09c0:	f000 fac2 	bl	80a0f48 <strlen>
 80a09c4:	2500      	movs	r5, #0
 80a09c6:	9500      	str	r5, [sp, #0]
 80a09c8:	b281      	uxth	r1, r0
 80a09ca:	687b      	ldr	r3, [r7, #4]
 80a09cc:	aa03      	add	r2, sp, #12
 80a09ce:	4630      	mov	r0, r6
 80a09d0:	f7ff fc6e 	bl	80a02b0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a09d4:	b120      	cbz	r0, 80a09e0 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a09d6:	4629      	mov	r1, r5
 80a09d8:	4620      	mov	r0, r4
 80a09da:	f7ff fd49 	bl	80a0470 <_ZN9IPAddressC1Em>
 80a09de:	e003      	b.n	80a09e8 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a09e0:	a903      	add	r1, sp, #12
 80a09e2:	4620      	mov	r0, r4
 80a09e4:	f7ff fd32 	bl	80a044c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a09e8:	4620      	mov	r0, r4
 80a09ea:	b009      	add	sp, #36	; 0x24
 80a09ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a09ee <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a09ee:	2200      	movs	r2, #0
 80a09f0:	4611      	mov	r1, r2
 80a09f2:	6840      	ldr	r0, [r0, #4]
 80a09f4:	f7ff bcc8 	b.w	80a0388 <network_listening>

080a09f8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a09f8:	2200      	movs	r2, #0
 80a09fa:	4611      	mov	r1, r2
 80a09fc:	6840      	ldr	r0, [r0, #4]
 80a09fe:	f7ff bcd3 	b.w	80a03a8 <network_get_listen_timeout>

080a0a02 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a0a02:	2200      	movs	r2, #0
 80a0a04:	6840      	ldr	r0, [r0, #4]
 80a0a06:	f7ff bcc7 	b.w	80a0398 <network_set_listen_timeout>

080a0a0a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0a0a:	2200      	movs	r2, #0
 80a0a0c:	f081 0101 	eor.w	r1, r1, #1
 80a0a10:	6840      	ldr	r0, [r0, #4]
 80a0a12:	f7ff bcb1 	b.w	80a0378 <network_listen>

080a0a16 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a0a16:	2300      	movs	r3, #0
 80a0a18:	461a      	mov	r2, r3
 80a0a1a:	4619      	mov	r1, r3
 80a0a1c:	6840      	ldr	r0, [r0, #4]
 80a0a1e:	f7ff bca3 	b.w	80a0368 <network_off>

080a0a22 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0a22:	2300      	movs	r3, #0
 80a0a24:	461a      	mov	r2, r3
 80a0a26:	4619      	mov	r1, r3
 80a0a28:	6840      	ldr	r0, [r0, #4]
 80a0a2a:	f7ff bc95 	b.w	80a0358 <network_on>

080a0a2e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a0a2e:	2200      	movs	r2, #0
 80a0a30:	4611      	mov	r1, r2
 80a0a32:	6840      	ldr	r0, [r0, #4]
 80a0a34:	f7ff bc78 	b.w	80a0328 <network_connecting>

080a0a38 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0a38:	2200      	movs	r2, #0
 80a0a3a:	2102      	movs	r1, #2
 80a0a3c:	6840      	ldr	r0, [r0, #4]
 80a0a3e:	f7ff bc7b 	b.w	80a0338 <network_disconnect>

080a0a42 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0a42:	2300      	movs	r3, #0
 80a0a44:	461a      	mov	r2, r3
 80a0a46:	6840      	ldr	r0, [r0, #4]
 80a0a48:	f7ff bc66 	b.w	80a0318 <network_connect>

080a0a4c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a0a4c:	4b02      	ldr	r3, [pc, #8]	; (80a0a58 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0a4e:	2204      	movs	r2, #4
 80a0a50:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0a52:	4a02      	ldr	r2, [pc, #8]	; (80a0a5c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0a54:	601a      	str	r2, [r3, #0]
 80a0a56:	4770      	bx	lr
 80a0a58:	200003e8 	.word	0x200003e8
 80a0a5c:	080a1284 	.word	0x080a1284

080a0a60 <setup>:
 80a0a60:	4770      	bx	lr
	...

080a0a64 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0a64:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0a66:	4b14      	ldr	r3, [pc, #80]	; (80a0ab8 <serialEventRun+0x54>)
 80a0a68:	b133      	cbz	r3, 80a0a78 <serialEventRun+0x14>
 80a0a6a:	f7ff ff45 	bl	80a08f8 <_Z16_fetch_usbserialv>
 80a0a6e:	6803      	ldr	r3, [r0, #0]
 80a0a70:	691b      	ldr	r3, [r3, #16]
 80a0a72:	4798      	blx	r3
 80a0a74:	2800      	cmp	r0, #0
 80a0a76:	dc16      	bgt.n	80a0aa6 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0a78:	4b10      	ldr	r3, [pc, #64]	; (80a0abc <serialEventRun+0x58>)
 80a0a7a:	b133      	cbz	r3, 80a0a8a <serialEventRun+0x26>
 80a0a7c:	f7ff feb2 	bl	80a07e4 <_Z22__fetch_global_Serial1v>
 80a0a80:	6803      	ldr	r3, [r0, #0]
 80a0a82:	691b      	ldr	r3, [r3, #16]
 80a0a84:	4798      	blx	r3
 80a0a86:	2800      	cmp	r0, #0
 80a0a88:	dc10      	bgt.n	80a0aac <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0a8a:	4b0d      	ldr	r3, [pc, #52]	; (80a0ac0 <serialEventRun+0x5c>)
 80a0a8c:	b10b      	cbz	r3, 80a0a92 <serialEventRun+0x2e>
 80a0a8e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0a92:	4b0c      	ldr	r3, [pc, #48]	; (80a0ac4 <serialEventRun+0x60>)
 80a0a94:	b17b      	cbz	r3, 80a0ab6 <serialEventRun+0x52>
 80a0a96:	f7ff ff5d 	bl	80a0954 <_Z17_fetch_usbserial1v>
 80a0a9a:	6803      	ldr	r3, [r0, #0]
 80a0a9c:	691b      	ldr	r3, [r3, #16]
 80a0a9e:	4798      	blx	r3
 80a0aa0:	2800      	cmp	r0, #0
 80a0aa2:	dc06      	bgt.n	80a0ab2 <serialEventRun+0x4e>
 80a0aa4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0aa6:	f3af 8000 	nop.w
 80a0aaa:	e7e5      	b.n	80a0a78 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0aac:	f3af 8000 	nop.w
 80a0ab0:	e7eb      	b.n	80a0a8a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0ab2:	f3af 8000 	nop.w
 80a0ab6:	bd08      	pop	{r3, pc}
	...

080a0ac8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0ac8:	b508      	push	{r3, lr}
	serialEventRun();
 80a0aca:	f7ff ffcb 	bl	80a0a64 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0ace:	f7ff fb5f 	bl	80a0190 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0ad2:	4b01      	ldr	r3, [pc, #4]	; (80a0ad8 <_post_loop+0x10>)
 80a0ad4:	6018      	str	r0, [r3, #0]
 80a0ad6:	bd08      	pop	{r3, pc}
 80a0ad8:	200003f8 	.word	0x200003f8

080a0adc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0adc:	4802      	ldr	r0, [pc, #8]	; (80a0ae8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0ade:	4a03      	ldr	r2, [pc, #12]	; (80a0aec <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0ae0:	4903      	ldr	r1, [pc, #12]	; (80a0af0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0ae2:	1a12      	subs	r2, r2, r0
 80a0ae4:	f000 b9f4 	b.w	80a0ed0 <memcpy>
 80a0ae8:	40024000 	.word	0x40024000
 80a0aec:	40024004 	.word	0x40024004
 80a0af0:	080a1450 	.word	0x080a1450

080a0af4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0af4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0af6:	2300      	movs	r3, #0
 80a0af8:	9300      	str	r3, [sp, #0]
 80a0afa:	461a      	mov	r2, r3
 80a0afc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0b00:	f7ff fbf8 	bl	80a02f4 <system_ctrl_set_result>
}
 80a0b04:	b003      	add	sp, #12
 80a0b06:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0b0c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0b0c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0b0e:	8843      	ldrh	r3, [r0, #2]
 80a0b10:	2b0a      	cmp	r3, #10
 80a0b12:	d008      	beq.n	80a0b26 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0b14:	2b50      	cmp	r3, #80	; 0x50
 80a0b16:	d109      	bne.n	80a0b2c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0b18:	4b09      	ldr	r3, [pc, #36]	; (80a0b40 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0b1a:	681b      	ldr	r3, [r3, #0]
 80a0b1c:	b13b      	cbz	r3, 80a0b2e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0b1e:	b003      	add	sp, #12
 80a0b20:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0b24:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a0b26:	f7ff ffe5 	bl	80a0af4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a0b2a:	e006      	b.n	80a0b3a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0b2c:	2300      	movs	r3, #0
 80a0b2e:	9300      	str	r3, [sp, #0]
 80a0b30:	461a      	mov	r2, r3
 80a0b32:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0b36:	f7ff fbdd 	bl	80a02f4 <system_ctrl_set_result>
        break;
    }
}
 80a0b3a:	b003      	add	sp, #12
 80a0b3c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0b40:	200003f0 	.word	0x200003f0

080a0b44 <module_user_init_hook>:

void module_user_init_hook()
{
 80a0b44:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0b46:	4c10      	ldr	r4, [pc, #64]	; (80a0b88 <module_user_init_hook+0x44>)
 80a0b48:	4d10      	ldr	r5, [pc, #64]	; (80a0b8c <module_user_init_hook+0x48>)
 80a0b4a:	6823      	ldr	r3, [r4, #0]
 80a0b4c:	42ab      	cmp	r3, r5
 80a0b4e:	4b10      	ldr	r3, [pc, #64]	; (80a0b90 <module_user_init_hook+0x4c>)
 80a0b50:	bf0c      	ite	eq
 80a0b52:	2201      	moveq	r2, #1
 80a0b54:	2200      	movne	r2, #0
 80a0b56:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0b58:	d002      	beq.n	80a0b60 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0b5a:	f7ff ffbf 	bl	80a0adc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0b5e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0b60:	f7ff fb0e 	bl	80a0180 <HAL_RNG_GetRandomNumber>
 80a0b64:	4604      	mov	r4, r0
    srand(seed);
 80a0b66:	f000 f9c7 	bl	80a0ef8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0b6a:	4b0a      	ldr	r3, [pc, #40]	; (80a0b94 <module_user_init_hook+0x50>)
 80a0b6c:	b113      	cbz	r3, 80a0b74 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a0b6e:	4620      	mov	r0, r4
 80a0b70:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0b74:	2100      	movs	r1, #0
 80a0b76:	4807      	ldr	r0, [pc, #28]	; (80a0b94 <module_user_init_hook+0x50>)
 80a0b78:	f7ff fbc6 	bl	80a0308 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0b80:	2100      	movs	r1, #0
 80a0b82:	4805      	ldr	r0, [pc, #20]	; (80a0b98 <module_user_init_hook+0x54>)
 80a0b84:	f7ff bbac 	b.w	80a02e0 <system_ctrl_set_app_request_handler>
 80a0b88:	40024000 	.word	0x40024000
 80a0b8c:	9a271c1e 	.word	0x9a271c1e
 80a0b90:	200003f4 	.word	0x200003f4
 80a0b94:	00000000 	.word	0x00000000
 80a0b98:	080a0b0d 	.word	0x080a0b0d

080a0b9c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0b9c:	b513      	push	{r0, r1, r4, lr}
 80a0b9e:	4c08      	ldr	r4, [pc, #32]	; (80a0bc0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0ba0:	2300      	movs	r3, #0
 80a0ba2:	461a      	mov	r2, r3
 80a0ba4:	4619      	mov	r1, r3
 80a0ba6:	9300      	str	r3, [sp, #0]
 80a0ba8:	4620      	mov	r0, r4
 80a0baa:	f7ff fc77 	bl	80a049c <_ZN9IPAddressC1Ehhhh>
 80a0bae:	4620      	mov	r0, r4
 80a0bb0:	4a04      	ldr	r2, [pc, #16]	; (80a0bc4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0bb2:	4905      	ldr	r1, [pc, #20]	; (80a0bc8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0bb4:	b002      	add	sp, #8
 80a0bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0bba:	f000 b829 	b.w	80a0c10 <__aeabi_atexit>
 80a0bbe:	bf00      	nop
 80a0bc0:	200003fc 	.word	0x200003fc
 80a0bc4:	2000036c 	.word	0x2000036c
 80a0bc8:	080a03f1 	.word	0x080a03f1

080a0bcc <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0bcc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0bce:	4c0c      	ldr	r4, [pc, #48]	; (80a0c00 <_GLOBAL__sub_I_SPI+0x34>)
 80a0bd0:	4e0c      	ldr	r6, [pc, #48]	; (80a0c04 <_GLOBAL__sub_I_SPI+0x38>)
 80a0bd2:	4d0d      	ldr	r5, [pc, #52]	; (80a0c08 <_GLOBAL__sub_I_SPI+0x3c>)
 80a0bd4:	2100      	movs	r1, #0
 80a0bd6:	4620      	mov	r0, r4
 80a0bd8:	f7ff fd92 	bl	80a0700 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0bdc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0bde:	4c0b      	ldr	r4, [pc, #44]	; (80a0c0c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0be0:	4632      	mov	r2, r6
 80a0be2:	4629      	mov	r1, r5
 80a0be4:	f000 f814 	bl	80a0c10 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0be8:	2101      	movs	r1, #1
 80a0bea:	4620      	mov	r0, r4
 80a0bec:	f7ff fd88 	bl	80a0700 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0bf0:	4632      	mov	r2, r6
 80a0bf2:	4629      	mov	r1, r5
 80a0bf4:	4620      	mov	r0, r4
 80a0bf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a0bfa:	f000 b809 	b.w	80a0c10 <__aeabi_atexit>
 80a0bfe:	bf00      	nop
 80a0c00:	20000414 	.word	0x20000414
 80a0c04:	2000036c 	.word	0x2000036c
 80a0c08:	080a06f1 	.word	0x080a06f1
 80a0c0c:	20000424 	.word	0x20000424

080a0c10 <__aeabi_atexit>:
 80a0c10:	460b      	mov	r3, r1
 80a0c12:	4601      	mov	r1, r0
 80a0c14:	4618      	mov	r0, r3
 80a0c16:	f000 b94d 	b.w	80a0eb4 <__cxa_atexit>
	...

080a0c1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a0c1c:	4b24      	ldr	r3, [pc, #144]	; (80a0cb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a0c1e:	681a      	ldr	r2, [r3, #0]
 80a0c20:	07d0      	lsls	r0, r2, #31
 80a0c22:	bf5c      	itt	pl
 80a0c24:	2201      	movpl	r2, #1
 80a0c26:	601a      	strpl	r2, [r3, #0]
 80a0c28:	4b22      	ldr	r3, [pc, #136]	; (80a0cb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a0c2a:	681a      	ldr	r2, [r3, #0]
 80a0c2c:	07d1      	lsls	r1, r2, #31
 80a0c2e:	bf5c      	itt	pl
 80a0c30:	2201      	movpl	r2, #1
 80a0c32:	601a      	strpl	r2, [r3, #0]
 80a0c34:	4b20      	ldr	r3, [pc, #128]	; (80a0cb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a0c36:	681a      	ldr	r2, [r3, #0]
 80a0c38:	07d2      	lsls	r2, r2, #31
 80a0c3a:	bf5c      	itt	pl
 80a0c3c:	2201      	movpl	r2, #1
 80a0c3e:	601a      	strpl	r2, [r3, #0]
 80a0c40:	4b1e      	ldr	r3, [pc, #120]	; (80a0cbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a0c42:	681a      	ldr	r2, [r3, #0]
 80a0c44:	07d0      	lsls	r0, r2, #31
 80a0c46:	bf5c      	itt	pl
 80a0c48:	2201      	movpl	r2, #1
 80a0c4a:	601a      	strpl	r2, [r3, #0]
 80a0c4c:	4b1c      	ldr	r3, [pc, #112]	; (80a0cc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a0c4e:	681a      	ldr	r2, [r3, #0]
 80a0c50:	07d1      	lsls	r1, r2, #31
 80a0c52:	bf5c      	itt	pl
 80a0c54:	2201      	movpl	r2, #1
 80a0c56:	601a      	strpl	r2, [r3, #0]
 80a0c58:	4b1a      	ldr	r3, [pc, #104]	; (80a0cc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a0c5a:	681a      	ldr	r2, [r3, #0]
 80a0c5c:	07d2      	lsls	r2, r2, #31
 80a0c5e:	bf5c      	itt	pl
 80a0c60:	2201      	movpl	r2, #1
 80a0c62:	601a      	strpl	r2, [r3, #0]
 80a0c64:	4b18      	ldr	r3, [pc, #96]	; (80a0cc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a0c66:	681a      	ldr	r2, [r3, #0]
 80a0c68:	07d0      	lsls	r0, r2, #31
 80a0c6a:	bf5c      	itt	pl
 80a0c6c:	2201      	movpl	r2, #1
 80a0c6e:	601a      	strpl	r2, [r3, #0]
 80a0c70:	4b16      	ldr	r3, [pc, #88]	; (80a0ccc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a0c72:	681a      	ldr	r2, [r3, #0]
 80a0c74:	07d1      	lsls	r1, r2, #31
 80a0c76:	bf5c      	itt	pl
 80a0c78:	2201      	movpl	r2, #1
 80a0c7a:	601a      	strpl	r2, [r3, #0]
 80a0c7c:	4b14      	ldr	r3, [pc, #80]	; (80a0cd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a0c7e:	681a      	ldr	r2, [r3, #0]
 80a0c80:	07d2      	lsls	r2, r2, #31
 80a0c82:	bf5c      	itt	pl
 80a0c84:	2201      	movpl	r2, #1
 80a0c86:	601a      	strpl	r2, [r3, #0]
 80a0c88:	4b12      	ldr	r3, [pc, #72]	; (80a0cd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a0c8a:	681a      	ldr	r2, [r3, #0]
 80a0c8c:	07d0      	lsls	r0, r2, #31
 80a0c8e:	bf5c      	itt	pl
 80a0c90:	2201      	movpl	r2, #1
 80a0c92:	601a      	strpl	r2, [r3, #0]
 80a0c94:	4b10      	ldr	r3, [pc, #64]	; (80a0cd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a0c96:	681a      	ldr	r2, [r3, #0]
 80a0c98:	07d1      	lsls	r1, r2, #31
 80a0c9a:	bf5c      	itt	pl
 80a0c9c:	2201      	movpl	r2, #1
 80a0c9e:	601a      	strpl	r2, [r3, #0]
 80a0ca0:	4b0e      	ldr	r3, [pc, #56]	; (80a0cdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a0ca2:	681a      	ldr	r2, [r3, #0]
 80a0ca4:	07d2      	lsls	r2, r2, #31
 80a0ca6:	bf5c      	itt	pl
 80a0ca8:	2201      	movpl	r2, #1
 80a0caa:	601a      	strpl	r2, [r3, #0]
 80a0cac:	4770      	bx	lr
 80a0cae:	bf00      	nop
 80a0cb0:	20000460 	.word	0x20000460
 80a0cb4:	2000045c 	.word	0x2000045c
 80a0cb8:	20000458 	.word	0x20000458
 80a0cbc:	20000454 	.word	0x20000454
 80a0cc0:	20000450 	.word	0x20000450
 80a0cc4:	2000044c 	.word	0x2000044c
 80a0cc8:	20000448 	.word	0x20000448
 80a0ccc:	20000444 	.word	0x20000444
 80a0cd0:	20000440 	.word	0x20000440
 80a0cd4:	2000043c 	.word	0x2000043c
 80a0cd8:	20000438 	.word	0x20000438
 80a0cdc:	20000434 	.word	0x20000434

080a0ce0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0ce0:	4b18      	ldr	r3, [pc, #96]	; (80a0d44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0ce2:	681a      	ldr	r2, [r3, #0]
 80a0ce4:	07d1      	lsls	r1, r2, #31
 80a0ce6:	bf5c      	itt	pl
 80a0ce8:	2201      	movpl	r2, #1
 80a0cea:	601a      	strpl	r2, [r3, #0]
 80a0cec:	4b16      	ldr	r3, [pc, #88]	; (80a0d48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0cee:	681a      	ldr	r2, [r3, #0]
 80a0cf0:	07d2      	lsls	r2, r2, #31
 80a0cf2:	bf5c      	itt	pl
 80a0cf4:	2201      	movpl	r2, #1
 80a0cf6:	601a      	strpl	r2, [r3, #0]
 80a0cf8:	4b14      	ldr	r3, [pc, #80]	; (80a0d4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a0cfa:	681a      	ldr	r2, [r3, #0]
 80a0cfc:	07d0      	lsls	r0, r2, #31
 80a0cfe:	bf5c      	itt	pl
 80a0d00:	2201      	movpl	r2, #1
 80a0d02:	601a      	strpl	r2, [r3, #0]
 80a0d04:	4b12      	ldr	r3, [pc, #72]	; (80a0d50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a0d06:	681a      	ldr	r2, [r3, #0]
 80a0d08:	07d1      	lsls	r1, r2, #31
 80a0d0a:	bf5c      	itt	pl
 80a0d0c:	2201      	movpl	r2, #1
 80a0d0e:	601a      	strpl	r2, [r3, #0]
 80a0d10:	4b10      	ldr	r3, [pc, #64]	; (80a0d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a0d12:	681a      	ldr	r2, [r3, #0]
 80a0d14:	07d2      	lsls	r2, r2, #31
 80a0d16:	bf5c      	itt	pl
 80a0d18:	2201      	movpl	r2, #1
 80a0d1a:	601a      	strpl	r2, [r3, #0]
 80a0d1c:	4b0e      	ldr	r3, [pc, #56]	; (80a0d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a0d1e:	681a      	ldr	r2, [r3, #0]
 80a0d20:	07d0      	lsls	r0, r2, #31
 80a0d22:	bf5c      	itt	pl
 80a0d24:	2201      	movpl	r2, #1
 80a0d26:	601a      	strpl	r2, [r3, #0]
 80a0d28:	4b0c      	ldr	r3, [pc, #48]	; (80a0d5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a0d2a:	681a      	ldr	r2, [r3, #0]
 80a0d2c:	07d1      	lsls	r1, r2, #31
 80a0d2e:	bf5c      	itt	pl
 80a0d30:	2201      	movpl	r2, #1
 80a0d32:	601a      	strpl	r2, [r3, #0]
 80a0d34:	4b0a      	ldr	r3, [pc, #40]	; (80a0d60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a0d36:	681a      	ldr	r2, [r3, #0]
 80a0d38:	07d2      	lsls	r2, r2, #31
 80a0d3a:	bf5c      	itt	pl
 80a0d3c:	2201      	movpl	r2, #1
 80a0d3e:	601a      	strpl	r2, [r3, #0]
 80a0d40:	4770      	bx	lr
 80a0d42:	bf00      	nop
 80a0d44:	20000480 	.word	0x20000480
 80a0d48:	2000047c 	.word	0x2000047c
 80a0d4c:	20000478 	.word	0x20000478
 80a0d50:	20000474 	.word	0x20000474
 80a0d54:	20000470 	.word	0x20000470
 80a0d58:	2000046c 	.word	0x2000046c
 80a0d5c:	20000468 	.word	0x20000468
 80a0d60:	20000464 	.word	0x20000464

080a0d64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0d64:	4b18      	ldr	r3, [pc, #96]	; (80a0dc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0d66:	681a      	ldr	r2, [r3, #0]
 80a0d68:	07d1      	lsls	r1, r2, #31
 80a0d6a:	bf5c      	itt	pl
 80a0d6c:	2201      	movpl	r2, #1
 80a0d6e:	601a      	strpl	r2, [r3, #0]
 80a0d70:	4b16      	ldr	r3, [pc, #88]	; (80a0dcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0d72:	681a      	ldr	r2, [r3, #0]
 80a0d74:	07d2      	lsls	r2, r2, #31
 80a0d76:	bf5c      	itt	pl
 80a0d78:	2201      	movpl	r2, #1
 80a0d7a:	601a      	strpl	r2, [r3, #0]
 80a0d7c:	4b14      	ldr	r3, [pc, #80]	; (80a0dd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a0d7e:	681a      	ldr	r2, [r3, #0]
 80a0d80:	07d0      	lsls	r0, r2, #31
 80a0d82:	bf5c      	itt	pl
 80a0d84:	2201      	movpl	r2, #1
 80a0d86:	601a      	strpl	r2, [r3, #0]
 80a0d88:	4b12      	ldr	r3, [pc, #72]	; (80a0dd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a0d8a:	681a      	ldr	r2, [r3, #0]
 80a0d8c:	07d1      	lsls	r1, r2, #31
 80a0d8e:	bf5c      	itt	pl
 80a0d90:	2201      	movpl	r2, #1
 80a0d92:	601a      	strpl	r2, [r3, #0]
 80a0d94:	4b10      	ldr	r3, [pc, #64]	; (80a0dd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a0d96:	681a      	ldr	r2, [r3, #0]
 80a0d98:	07d2      	lsls	r2, r2, #31
 80a0d9a:	bf5c      	itt	pl
 80a0d9c:	2201      	movpl	r2, #1
 80a0d9e:	601a      	strpl	r2, [r3, #0]
 80a0da0:	4b0e      	ldr	r3, [pc, #56]	; (80a0ddc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a0da2:	681a      	ldr	r2, [r3, #0]
 80a0da4:	07d0      	lsls	r0, r2, #31
 80a0da6:	bf5c      	itt	pl
 80a0da8:	2201      	movpl	r2, #1
 80a0daa:	601a      	strpl	r2, [r3, #0]
 80a0dac:	4b0c      	ldr	r3, [pc, #48]	; (80a0de0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a0dae:	681a      	ldr	r2, [r3, #0]
 80a0db0:	07d1      	lsls	r1, r2, #31
 80a0db2:	bf5c      	itt	pl
 80a0db4:	2201      	movpl	r2, #1
 80a0db6:	601a      	strpl	r2, [r3, #0]
 80a0db8:	4b0a      	ldr	r3, [pc, #40]	; (80a0de4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a0dba:	681a      	ldr	r2, [r3, #0]
 80a0dbc:	07d2      	lsls	r2, r2, #31
 80a0dbe:	bf5c      	itt	pl
 80a0dc0:	2201      	movpl	r2, #1
 80a0dc2:	601a      	strpl	r2, [r3, #0]
 80a0dc4:	4770      	bx	lr
 80a0dc6:	bf00      	nop
 80a0dc8:	200004a0 	.word	0x200004a0
 80a0dcc:	2000049c 	.word	0x2000049c
 80a0dd0:	20000498 	.word	0x20000498
 80a0dd4:	20000494 	.word	0x20000494
 80a0dd8:	20000490 	.word	0x20000490
 80a0ddc:	2000048c 	.word	0x2000048c
 80a0de0:	20000488 	.word	0x20000488
 80a0de4:	20000484 	.word	0x20000484

080a0de8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a0de8:	4b24      	ldr	r3, [pc, #144]	; (80a0e7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a0dea:	681a      	ldr	r2, [r3, #0]
 80a0dec:	07d0      	lsls	r0, r2, #31
 80a0dee:	bf5c      	itt	pl
 80a0df0:	2201      	movpl	r2, #1
 80a0df2:	601a      	strpl	r2, [r3, #0]
 80a0df4:	4b22      	ldr	r3, [pc, #136]	; (80a0e80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a0df6:	681a      	ldr	r2, [r3, #0]
 80a0df8:	07d1      	lsls	r1, r2, #31
 80a0dfa:	bf5c      	itt	pl
 80a0dfc:	2201      	movpl	r2, #1
 80a0dfe:	601a      	strpl	r2, [r3, #0]
 80a0e00:	4b20      	ldr	r3, [pc, #128]	; (80a0e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a0e02:	681a      	ldr	r2, [r3, #0]
 80a0e04:	07d2      	lsls	r2, r2, #31
 80a0e06:	bf5c      	itt	pl
 80a0e08:	2201      	movpl	r2, #1
 80a0e0a:	601a      	strpl	r2, [r3, #0]
 80a0e0c:	4b1e      	ldr	r3, [pc, #120]	; (80a0e88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a0e0e:	681a      	ldr	r2, [r3, #0]
 80a0e10:	07d0      	lsls	r0, r2, #31
 80a0e12:	bf5c      	itt	pl
 80a0e14:	2201      	movpl	r2, #1
 80a0e16:	601a      	strpl	r2, [r3, #0]
 80a0e18:	4b1c      	ldr	r3, [pc, #112]	; (80a0e8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a0e1a:	681a      	ldr	r2, [r3, #0]
 80a0e1c:	07d1      	lsls	r1, r2, #31
 80a0e1e:	bf5c      	itt	pl
 80a0e20:	2201      	movpl	r2, #1
 80a0e22:	601a      	strpl	r2, [r3, #0]
 80a0e24:	4b1a      	ldr	r3, [pc, #104]	; (80a0e90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a0e26:	681a      	ldr	r2, [r3, #0]
 80a0e28:	07d2      	lsls	r2, r2, #31
 80a0e2a:	bf5c      	itt	pl
 80a0e2c:	2201      	movpl	r2, #1
 80a0e2e:	601a      	strpl	r2, [r3, #0]
 80a0e30:	4b18      	ldr	r3, [pc, #96]	; (80a0e94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a0e32:	681a      	ldr	r2, [r3, #0]
 80a0e34:	07d0      	lsls	r0, r2, #31
 80a0e36:	bf5c      	itt	pl
 80a0e38:	2201      	movpl	r2, #1
 80a0e3a:	601a      	strpl	r2, [r3, #0]
 80a0e3c:	4b16      	ldr	r3, [pc, #88]	; (80a0e98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a0e3e:	681a      	ldr	r2, [r3, #0]
 80a0e40:	07d1      	lsls	r1, r2, #31
 80a0e42:	bf5c      	itt	pl
 80a0e44:	2201      	movpl	r2, #1
 80a0e46:	601a      	strpl	r2, [r3, #0]
 80a0e48:	4b14      	ldr	r3, [pc, #80]	; (80a0e9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a0e4a:	681a      	ldr	r2, [r3, #0]
 80a0e4c:	07d2      	lsls	r2, r2, #31
 80a0e4e:	bf5c      	itt	pl
 80a0e50:	2201      	movpl	r2, #1
 80a0e52:	601a      	strpl	r2, [r3, #0]
 80a0e54:	4b12      	ldr	r3, [pc, #72]	; (80a0ea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a0e56:	681a      	ldr	r2, [r3, #0]
 80a0e58:	07d0      	lsls	r0, r2, #31
 80a0e5a:	bf5c      	itt	pl
 80a0e5c:	2201      	movpl	r2, #1
 80a0e5e:	601a      	strpl	r2, [r3, #0]
 80a0e60:	4b10      	ldr	r3, [pc, #64]	; (80a0ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a0e62:	681a      	ldr	r2, [r3, #0]
 80a0e64:	07d1      	lsls	r1, r2, #31
 80a0e66:	bf5c      	itt	pl
 80a0e68:	2201      	movpl	r2, #1
 80a0e6a:	601a      	strpl	r2, [r3, #0]
 80a0e6c:	4b0e      	ldr	r3, [pc, #56]	; (80a0ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a0e6e:	681a      	ldr	r2, [r3, #0]
 80a0e70:	07d2      	lsls	r2, r2, #31
 80a0e72:	bf5c      	itt	pl
 80a0e74:	2201      	movpl	r2, #1
 80a0e76:	601a      	strpl	r2, [r3, #0]
 80a0e78:	4770      	bx	lr
 80a0e7a:	bf00      	nop
 80a0e7c:	200004d0 	.word	0x200004d0
 80a0e80:	200004cc 	.word	0x200004cc
 80a0e84:	200004c8 	.word	0x200004c8
 80a0e88:	200004c4 	.word	0x200004c4
 80a0e8c:	200004c0 	.word	0x200004c0
 80a0e90:	200004bc 	.word	0x200004bc
 80a0e94:	200004b8 	.word	0x200004b8
 80a0e98:	200004b4 	.word	0x200004b4
 80a0e9c:	200004b0 	.word	0x200004b0
 80a0ea0:	200004ac 	.word	0x200004ac
 80a0ea4:	200004a8 	.word	0x200004a8
 80a0ea8:	200004a4 	.word	0x200004a4

080a0eac <atoi>:
 80a0eac:	220a      	movs	r2, #10
 80a0eae:	2100      	movs	r1, #0
 80a0eb0:	f000 b8d8 	b.w	80a1064 <strtol>

080a0eb4 <__cxa_atexit>:
 80a0eb4:	b510      	push	{r4, lr}
 80a0eb6:	4c05      	ldr	r4, [pc, #20]	; (80a0ecc <__cxa_atexit+0x18>)
 80a0eb8:	4613      	mov	r3, r2
 80a0eba:	b12c      	cbz	r4, 80a0ec8 <__cxa_atexit+0x14>
 80a0ebc:	460a      	mov	r2, r1
 80a0ebe:	4601      	mov	r1, r0
 80a0ec0:	2002      	movs	r0, #2
 80a0ec2:	f3af 8000 	nop.w
 80a0ec6:	bd10      	pop	{r4, pc}
 80a0ec8:	4620      	mov	r0, r4
 80a0eca:	bd10      	pop	{r4, pc}
 80a0ecc:	00000000 	.word	0x00000000

080a0ed0 <memcpy>:
 80a0ed0:	b510      	push	{r4, lr}
 80a0ed2:	1e43      	subs	r3, r0, #1
 80a0ed4:	440a      	add	r2, r1
 80a0ed6:	4291      	cmp	r1, r2
 80a0ed8:	d004      	beq.n	80a0ee4 <memcpy+0x14>
 80a0eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a0ede:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a0ee2:	e7f8      	b.n	80a0ed6 <memcpy+0x6>
 80a0ee4:	bd10      	pop	{r4, pc}

080a0ee6 <memset>:
 80a0ee6:	4603      	mov	r3, r0
 80a0ee8:	4402      	add	r2, r0
 80a0eea:	4293      	cmp	r3, r2
 80a0eec:	d002      	beq.n	80a0ef4 <memset+0xe>
 80a0eee:	f803 1b01 	strb.w	r1, [r3], #1
 80a0ef2:	e7fa      	b.n	80a0eea <memset+0x4>
 80a0ef4:	4770      	bx	lr
	...

080a0ef8 <srand>:
 80a0ef8:	b538      	push	{r3, r4, r5, lr}
 80a0efa:	4b12      	ldr	r3, [pc, #72]	; (80a0f44 <srand+0x4c>)
 80a0efc:	4605      	mov	r5, r0
 80a0efe:	681c      	ldr	r4, [r3, #0]
 80a0f00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a0f02:	b9d3      	cbnz	r3, 80a0f3a <srand+0x42>
 80a0f04:	2018      	movs	r0, #24
 80a0f06:	f7ff fa57 	bl	80a03b8 <malloc>
 80a0f0a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a0f0e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a0f10:	8003      	strh	r3, [r0, #0]
 80a0f12:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a0f16:	8043      	strh	r3, [r0, #2]
 80a0f18:	f241 2334 	movw	r3, #4660	; 0x1234
 80a0f1c:	8083      	strh	r3, [r0, #4]
 80a0f1e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a0f22:	80c3      	strh	r3, [r0, #6]
 80a0f24:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a0f28:	8103      	strh	r3, [r0, #8]
 80a0f2a:	2305      	movs	r3, #5
 80a0f2c:	8143      	strh	r3, [r0, #10]
 80a0f2e:	230b      	movs	r3, #11
 80a0f30:	8183      	strh	r3, [r0, #12]
 80a0f32:	2201      	movs	r2, #1
 80a0f34:	2300      	movs	r3, #0
 80a0f36:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a0f3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a0f3c:	2200      	movs	r2, #0
 80a0f3e:	611d      	str	r5, [r3, #16]
 80a0f40:	615a      	str	r2, [r3, #20]
 80a0f42:	bd38      	pop	{r3, r4, r5, pc}
 80a0f44:	20000368 	.word	0x20000368

080a0f48 <strlen>:
 80a0f48:	4603      	mov	r3, r0
 80a0f4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a0f4e:	2a00      	cmp	r2, #0
 80a0f50:	d1fb      	bne.n	80a0f4a <strlen+0x2>
 80a0f52:	1a18      	subs	r0, r3, r0
 80a0f54:	3801      	subs	r0, #1
 80a0f56:	4770      	bx	lr

080a0f58 <_strtol_r>:
 80a0f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0f5c:	460f      	mov	r7, r1
 80a0f5e:	4680      	mov	r8, r0
 80a0f60:	483f      	ldr	r0, [pc, #252]	; (80a1060 <_strtol_r+0x108>)
 80a0f62:	f8d0 9000 	ldr.w	r9, [r0]
 80a0f66:	463d      	mov	r5, r7
 80a0f68:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a0f6c:	eb09 0004 	add.w	r0, r9, r4
 80a0f70:	7840      	ldrb	r0, [r0, #1]
 80a0f72:	f000 0008 	and.w	r0, r0, #8
 80a0f76:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a0f7a:	b108      	cbz	r0, 80a0f80 <_strtol_r+0x28>
 80a0f7c:	462f      	mov	r7, r5
 80a0f7e:	e7f2      	b.n	80a0f66 <_strtol_r+0xe>
 80a0f80:	2c2d      	cmp	r4, #45	; 0x2d
 80a0f82:	d103      	bne.n	80a0f8c <_strtol_r+0x34>
 80a0f84:	1cbd      	adds	r5, r7, #2
 80a0f86:	787c      	ldrb	r4, [r7, #1]
 80a0f88:	2601      	movs	r6, #1
 80a0f8a:	e003      	b.n	80a0f94 <_strtol_r+0x3c>
 80a0f8c:	2c2b      	cmp	r4, #43	; 0x2b
 80a0f8e:	bf04      	itt	eq
 80a0f90:	787c      	ldrbeq	r4, [r7, #1]
 80a0f92:	1cbd      	addeq	r5, r7, #2
 80a0f94:	b113      	cbz	r3, 80a0f9c <_strtol_r+0x44>
 80a0f96:	2b10      	cmp	r3, #16
 80a0f98:	d10a      	bne.n	80a0fb0 <_strtol_r+0x58>
 80a0f9a:	e05b      	b.n	80a1054 <_strtol_r+0xfc>
 80a0f9c:	2c30      	cmp	r4, #48	; 0x30
 80a0f9e:	d157      	bne.n	80a1050 <_strtol_r+0xf8>
 80a0fa0:	7828      	ldrb	r0, [r5, #0]
 80a0fa2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a0fa6:	2858      	cmp	r0, #88	; 0x58
 80a0fa8:	d14d      	bne.n	80a1046 <_strtol_r+0xee>
 80a0faa:	786c      	ldrb	r4, [r5, #1]
 80a0fac:	2310      	movs	r3, #16
 80a0fae:	3502      	adds	r5, #2
 80a0fb0:	2e00      	cmp	r6, #0
 80a0fb2:	bf14      	ite	ne
 80a0fb4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a0fb8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a0fbc:	fbbc faf3 	udiv	sl, ip, r3
 80a0fc0:	2700      	movs	r7, #0
 80a0fc2:	4638      	mov	r0, r7
 80a0fc4:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a0fc8:	eb09 0e04 	add.w	lr, r9, r4
 80a0fcc:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a0fd0:	f01e 0f04 	tst.w	lr, #4
 80a0fd4:	d001      	beq.n	80a0fda <_strtol_r+0x82>
 80a0fd6:	3c30      	subs	r4, #48	; 0x30
 80a0fd8:	e00b      	b.n	80a0ff2 <_strtol_r+0x9a>
 80a0fda:	f01e 0e03 	ands.w	lr, lr, #3
 80a0fde:	d01b      	beq.n	80a1018 <_strtol_r+0xc0>
 80a0fe0:	f1be 0f01 	cmp.w	lr, #1
 80a0fe4:	bf0c      	ite	eq
 80a0fe6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a0fea:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a0fee:	ebce 0404 	rsb	r4, lr, r4
 80a0ff2:	42a3      	cmp	r3, r4
 80a0ff4:	dd10      	ble.n	80a1018 <_strtol_r+0xc0>
 80a0ff6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80a0ffa:	d00a      	beq.n	80a1012 <_strtol_r+0xba>
 80a0ffc:	4550      	cmp	r0, sl
 80a0ffe:	d806      	bhi.n	80a100e <_strtol_r+0xb6>
 80a1000:	d101      	bne.n	80a1006 <_strtol_r+0xae>
 80a1002:	4564      	cmp	r4, ip
 80a1004:	dc03      	bgt.n	80a100e <_strtol_r+0xb6>
 80a1006:	fb03 4000 	mla	r0, r3, r0, r4
 80a100a:	2701      	movs	r7, #1
 80a100c:	e001      	b.n	80a1012 <_strtol_r+0xba>
 80a100e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a1012:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a1016:	e7d7      	b.n	80a0fc8 <_strtol_r+0x70>
 80a1018:	1c7b      	adds	r3, r7, #1
 80a101a:	d10c      	bne.n	80a1036 <_strtol_r+0xde>
 80a101c:	2e00      	cmp	r6, #0
 80a101e:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a1022:	bf14      	ite	ne
 80a1024:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a1028:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a102c:	f8c8 3000 	str.w	r3, [r8]
 80a1030:	b92a      	cbnz	r2, 80a103e <_strtol_r+0xe6>
 80a1032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1036:	b106      	cbz	r6, 80a103a <_strtol_r+0xe2>
 80a1038:	4240      	negs	r0, r0
 80a103a:	b172      	cbz	r2, 80a105a <_strtol_r+0x102>
 80a103c:	b107      	cbz	r7, 80a1040 <_strtol_r+0xe8>
 80a103e:	1e69      	subs	r1, r5, #1
 80a1040:	6011      	str	r1, [r2, #0]
 80a1042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1046:	2430      	movs	r4, #48	; 0x30
 80a1048:	2b00      	cmp	r3, #0
 80a104a:	d1b1      	bne.n	80a0fb0 <_strtol_r+0x58>
 80a104c:	2308      	movs	r3, #8
 80a104e:	e7af      	b.n	80a0fb0 <_strtol_r+0x58>
 80a1050:	230a      	movs	r3, #10
 80a1052:	e7ad      	b.n	80a0fb0 <_strtol_r+0x58>
 80a1054:	2c30      	cmp	r4, #48	; 0x30
 80a1056:	d0a3      	beq.n	80a0fa0 <_strtol_r+0x48>
 80a1058:	e7aa      	b.n	80a0fb0 <_strtol_r+0x58>
 80a105a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a105e:	bf00      	nop
 80a1060:	20000304 	.word	0x20000304

080a1064 <strtol>:
 80a1064:	4613      	mov	r3, r2
 80a1066:	460a      	mov	r2, r1
 80a1068:	4601      	mov	r1, r0
 80a106a:	4802      	ldr	r0, [pc, #8]	; (80a1074 <strtol+0x10>)
 80a106c:	6800      	ldr	r0, [r0, #0]
 80a106e:	f7ff bf73 	b.w	80a0f58 <_strtol_r>
 80a1072:	bf00      	nop
 80a1074:	20000368 	.word	0x20000368

080a1078 <dynalib_user>:
 80a1078:	080a001d 080a005d 080a0089 080a008d     ....]...........
 80a1088:	00000000 6c6c6548 6172206f 546e6576     ....Hello ravenT
 80a1098:	53002154 72616e6f 6e6f6320 7463656e     T!.Sonar connect
 80a10a8:	52006465 65676e61 0000203a              ed.Range: ..

080a10b4 <_ZTV9IPAddress>:
	...
 80a10bc:	080a03ff 080a03f1 080a03f3 6e6c0066     ............f.ln
 80a10cc:	006e6600 65646f63 74656400 006c6961     .fn.code.detail.
 80a10dc:	25000a0d 75303130 205d0020 00642500     ...%010u .] .%d.
 80a10ec:	2800202c 00203a29 63005b20 2065646f     , .(): . [.code 
 80a10fc:	2500203d 65640069 6c696174 203d2073     = .%i.details = 
 80a110c:	75616200 65530064 6c616972 42535500     .baud.Serial.USB
 80a111c:	69726553 00316c61 65707974 72617000     Serial1.type.par
 80a112c:	63006d61 6900646d 6e680064 74730064     am.cmd.id.hnd.st
 80a113c:	66006d72 00746c69 006c766c 48646461     rm.filt.lvl.addH
 80a114c:	6c646e61 72007265 766f6d65 6e614865     andler.removeHan
 80a115c:	72656c64 756e6500 6e61486d 72656c64     dler.enumHandler
 80a116c:	534a0073 74534e4f 6d616572 48676f4c     s.JSONStreamLogH
 80a117c:	6c646e61 61007265 6e007070 00656e6f     andler.app.none.
 80a118c:	63617274 6e690065 77006f66 006e7261     trace.info.warn.
 80a119c:	6f727265 61700072 0063696e 006c6c61     error.panic.all.

080a11ac <_ZTVN5spark12NetworkClassE>:
	...
 80a11b4:	080a04c5 080a04cf 080a04d9 080a04e3     ................
 80a11c4:	080a04ed 080a04f9 080a0505 080a0511     ................
 80a11d4:	080a0519 080a0523 080a052d              ....#...-...

080a11e0 <_ZTV8SPIClass>:
	...
 80a11e8:	080a06f1 080a06f3 2b25005a 3a643330     ........Z.%+03d:
 80a11f8:	75323025 2d592500 252d6d25 48255464     %02u.%Y-%m-%dT%H
 80a1208:	3a4d253a 7a255325 63736100 656d6974     :%M:%S%z.asctime
 80a1218:	00000000                                ....

080a121c <_ZTV11USARTSerial>:
	...
 80a1224:	080a0755 080a0779 080a0785 080a0591     U...y...........
 80a1234:	080a0761 080a076d 080a0767 080a0773     a...m...g...s...
 80a1244:	080a0757 080a075b                       W...[...

080a124c <_ZTV9USBSerial>:
	...
 80a1254:	080a0869 080a08ad 080a0887 080a0591     i...............
 80a1264:	080a0881 080a086b 080a0873 080a08a7     ....k...s.......
 80a1274:	080a087b 080a0865                       {...e...

080a127c <_ZTVN5spark9WiFiClassE>:
	...
 80a1284:	080a0a43 080a0a39 080a0a2f 080a09a1     C...9.../.......
 80a1294:	080a0a23 080a0a17 080a0a0b 080a0a03     #...............
 80a12a4:	080a09f9 080a09ef 080a09ab              ............

080a12b0 <_ctype_>:
 80a12b0:	20202000 20202020 28282020 20282828     .         ((((( 
 80a12c0:	20202020 20202020 20202020 20202020                     
 80a12d0:	10108820 10101010 10101010 10101010      ...............
 80a12e0:	04040410 04040404 10040404 10101010     ................
 80a12f0:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a1300:	01010101 01010101 01010101 10101010     ................
 80a1310:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a1320:	02020202 02020202 02020202 10101010     ................
 80a1330:	00000020 00000000 00000000 00000000      ...............
	...

080a13b4 <__sf_fake_stdin>:
	...

080a13d4 <__sf_fake_stdout>:
	...

080a13f4 <__sf_fake_stderr>:
	...
 80a1414:	00000043                                         C.

080a1416 <link_const_variable_data_end>:
	...

080a1418 <link_constructors_location>:
 80a1418:	080a016d 	.word	0x080a016d
 80a141c:	080a04b5 	.word	0x080a04b5
 80a1420:	080a057d 	.word	0x080a057d
 80a1424:	080a06d5 	.word	0x080a06d5
 80a1428:	080a0729 	.word	0x080a0729
 80a142c:	080a0741 	.word	0x080a0741
 80a1430:	080a0a4d 	.word	0x080a0a4d
 80a1434:	080a0b9d 	.word	0x080a0b9d
 80a1438:	080a0bcd 	.word	0x080a0bcd
 80a143c:	080a0c1d 	.word	0x080a0c1d
 80a1440:	080a0ce1 	.word	0x080a0ce1
 80a1444:	080a0d65 	.word	0x080a0d65
 80a1448:	080a0de9 	.word	0x080a0de9

080a144c <link_constructors_end>:
 80a144c:	00000000 	.word	0x00000000

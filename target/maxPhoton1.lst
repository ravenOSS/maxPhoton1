
/Users/raventt/MBP_Projects/arduino/maxPhoton1/target/maxPhoton1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011c8  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a11e0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         0000006c  20000300  080a11e4  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000568  2000036c  2000036c  0003036c  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a1250  080a1250  00021250  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a1278  080a1278  00021278  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0007c56f  00000000  00000000  0002127c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000b499  00000000  00000000  0009d7eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000de0e  00000000  00000000  000a8c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000016e8  00000000  00000000  000b6a92  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002778  00000000  00000000  000b817a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001fbeb  00000000  00000000  000ba8f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00019454  00000000  00000000  000da4dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00095435  00000000  00000000  000f3931  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000a0d8  00000000  00000000  00188d68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	68 0e 0a 08                                         h...

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f000 fe47 	bl	80a0cc0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f000 fe4c 	bl	80a0cd6 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a11e4 	.word	0x080a11e4
 80a004c:	2000036c 	.word	0x2000036c
 80a0050:	2000036c 	.word	0x2000036c
 80a0054:	200008d4 	.word	0x200008d4
 80a0058:	200008d4 	.word	0x200008d4

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fc69 	bl	80a0934 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a11ac 	.word	0x080a11ac
 80a0084:	080a11dc 	.word	0x080a11dc

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b812 	b.w	80a00b0 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f859 	bl	80a0144 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bc0f 	b.w	80a08b8 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 b951 	b.w	80a0340 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <setup>:
 * Author: David Richards / ravenIoT
 * Date: 5.13.19
 */

void setup()
{
 80a00b0:	b508      	push	{r3, lr}
  Serial.begin(9600);
 80a00b2:	f000 fb57 	bl	80a0764 <_Z16_fetch_usbserialv>
 80a00b6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00ba:	f000 fb39 	bl	80a0730 <_ZN9USBSerial5beginEl>
  Serial.println("Hello ravenTT!");
 80a00be:	f000 fb51 	bl	80a0764 <_Z16_fetch_usbserialv>
 80a00c2:	4908      	ldr	r1, [pc, #32]	; (80a00e4 <setup+0x34>)
 80a00c4:	f000 f9cb 	bl	80a045e <_ZN5Print7printlnEPKc>
  Serial1.begin(9600);
 80a00c8:	f000 face 	bl	80a0668 <_Z22__fetch_global_Serial1v>
 80a00cc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00d0:	f000 fac6 	bl	80a0660 <_ZN11USARTSerial5beginEm>
  Serial.println("Sonar connected");
 80a00d4:	f000 fb46 	bl	80a0764 <_Z16_fetch_usbserialv>
}
 80a00d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void setup()
{
  Serial.begin(9600);
  Serial.println("Hello ravenTT!");
  Serial1.begin(9600);
  Serial.println("Sonar connected");
 80a00dc:	4902      	ldr	r1, [pc, #8]	; (80a00e8 <setup+0x38>)
 80a00de:	f000 b9be 	b.w	80a045e <_ZN5Print7printlnEPKc>
 80a00e2:	bf00      	nop
 80a00e4:	080a0e7c 	.word	0x080a0e7c
 80a00e8:	080a0e8b 	.word	0x080a0e8b

080a00ec <_Z7MAXreadv>:
  Serial.println(range);
  delay(1200); //set interval for sensor reading
}

int MAXread()
{
 80a00ec:	b513      	push	{r0, r1, r4, lr}
  uint8_t length = 4;
  char buffer[5];

  // flush and wait for a range reading
  Serial1.flush();
 80a00ee:	f000 fabb 	bl	80a0668 <_Z22__fetch_global_Serial1v>
 80a00f2:	6803      	ldr	r3, [r0, #0]
 80a00f4:	69db      	ldr	r3, [r3, #28]
 80a00f6:	4798      	blx	r3

  while (!Serial1.available() || Serial1.read() != 'R');
 80a00f8:	f000 fab6 	bl	80a0668 <_Z22__fetch_global_Serial1v>
 80a00fc:	6803      	ldr	r3, [r0, #0]
 80a00fe:	691b      	ldr	r3, [r3, #16]
 80a0100:	4798      	blx	r3
 80a0102:	2800      	cmp	r0, #0
 80a0104:	d0f8      	beq.n	80a00f8 <_Z7MAXreadv+0xc>
 80a0106:	f000 faaf 	bl	80a0668 <_Z22__fetch_global_Serial1v>
 80a010a:	6803      	ldr	r3, [r0, #0]
 80a010c:	695b      	ldr	r3, [r3, #20]
 80a010e:	4798      	blx	r3
 80a0110:	2852      	cmp	r0, #82	; 0x52
 80a0112:	d1f1      	bne.n	80a00f8 <_Z7MAXreadv+0xc>
 80a0114:	2400      	movs	r4, #0

  // read the range
  for (int i = 0; i < length; i++)
  {
    while (!Serial1.available());
 80a0116:	f000 faa7 	bl	80a0668 <_Z22__fetch_global_Serial1v>
 80a011a:	6803      	ldr	r3, [r0, #0]
 80a011c:	691b      	ldr	r3, [r3, #16]
 80a011e:	4798      	blx	r3
 80a0120:	2800      	cmp	r0, #0
 80a0122:	d0f8      	beq.n	80a0116 <_Z7MAXreadv+0x2a>
  
    buffer[i] = Serial1.read();
 80a0124:	f000 faa0 	bl	80a0668 <_Z22__fetch_global_Serial1v>
 80a0128:	6803      	ldr	r3, [r0, #0]
 80a012a:	695b      	ldr	r3, [r3, #20]
 80a012c:	4798      	blx	r3
 80a012e:	f80d 0004 	strb.w	r0, [sp, r4]
  Serial1.flush();

  while (!Serial1.available() || Serial1.read() != 'R');

  // read the range
  for (int i = 0; i < length; i++)
 80a0132:	3401      	adds	r4, #1
 80a0134:	2c04      	cmp	r4, #4
 80a0136:	d1ee      	bne.n	80a0116 <_Z7MAXreadv+0x2a>
    while (!Serial1.available());
  
    buffer[i] = Serial1.read();
  }

  return atoi(buffer);
 80a0138:	4668      	mov	r0, sp
 80a013a:	f000 fdaf 	bl	80a0c9c <atoi>
 80a013e:	b002      	add	sp, #8
 80a0140:	bd10      	pop	{r4, pc}
	...

080a0144 <loop>:
  Serial1.begin(9600);
  Serial.println("Sonar connected");
}

void loop()
{
 80a0144:	b510      	push	{r4, lr}
  int range = MAXread();
 80a0146:	f7ff ffd1 	bl	80a00ec <_Z7MAXreadv>
 80a014a:	4604      	mov	r4, r0
  Serial.print("Range: ");
 80a014c:	f000 fb0a 	bl	80a0764 <_Z16_fetch_usbserialv>
 80a0150:	4907      	ldr	r1, [pc, #28]	; (80a0170 <loop+0x2c>)
 80a0152:	f000 f971 	bl	80a0438 <_ZN5Print5printEPKc>
  Serial.println(range);
 80a0156:	f000 fb05 	bl	80a0764 <_Z16_fetch_usbserialv>
 80a015a:	4621      	mov	r1, r4
 80a015c:	220a      	movs	r2, #10
 80a015e:	f000 f9d6 	bl	80a050e <_ZN5Print7printlnEii>
  delay(1200); //set interval for sensor reading
}
 80a0162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void loop()
{
  int range = MAXread();
  Serial.print("Range: ");
  Serial.println(range);
  delay(1200); //set interval for sensor reading
 80a0166:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80a016a:	f000 b8f1 	b.w	80a0350 <delay>
 80a016e:	bf00      	nop
 80a0170:	080a0e9b 	.word	0x080a0e9b

080a0174 <_GLOBAL__sub_I_setup>:
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0174:	f000 b820 	b.w	80a01b8 <HAL_Pin_Map>

080a0178 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0178:	b508      	push	{r3, lr}
 80a017a:	4b02      	ldr	r3, [pc, #8]	; (80a0184 <os_mutex_create+0xc>)
 80a017c:	681b      	ldr	r3, [r3, #0]
 80a017e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0180:	9301      	str	r3, [sp, #4]
 80a0182:	bd08      	pop	{r3, pc}
 80a0184:	080601d0 	.word	0x080601d0

080a0188 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80a0188:	b508      	push	{r3, lr}
 80a018a:	4b02      	ldr	r3, [pc, #8]	; (80a0194 <HAL_Core_Get_Last_Reset_Info+0xc>)
 80a018c:	681b      	ldr	r3, [r3, #0]
 80a018e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0190:	9301      	str	r3, [sp, #4]
 80a0192:	bd08      	pop	{r3, pc}
 80a0194:	080601b8 	.word	0x080601b8

080a0198 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0198:	b508      	push	{r3, lr}
 80a019a:	4b02      	ldr	r3, [pc, #8]	; (80a01a4 <HAL_RNG_GetRandomNumber+0xc>)
 80a019c:	681b      	ldr	r3, [r3, #0]
 80a019e:	685b      	ldr	r3, [r3, #4]
 80a01a0:	9301      	str	r3, [sp, #4]
 80a01a2:	bd08      	pop	{r3, pc}
 80a01a4:	0806019c 	.word	0x0806019c

080a01a8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a01a8:	b508      	push	{r3, lr}
 80a01aa:	4b02      	ldr	r3, [pc, #8]	; (80a01b4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a01ac:	681b      	ldr	r3, [r3, #0]
 80a01ae:	695b      	ldr	r3, [r3, #20]
 80a01b0:	9301      	str	r3, [sp, #4]
 80a01b2:	bd08      	pop	{r3, pc}
 80a01b4:	0806019c 	.word	0x0806019c

080a01b8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a01b8:	b508      	push	{r3, lr}
 80a01ba:	4b02      	ldr	r3, [pc, #8]	; (80a01c4 <HAL_Pin_Map+0xc>)
 80a01bc:	681b      	ldr	r3, [r3, #0]
 80a01be:	681b      	ldr	r3, [r3, #0]
 80a01c0:	9301      	str	r3, [sp, #4]
 80a01c2:	bd08      	pop	{r3, pc}
 80a01c4:	080601b0 	.word	0x080601b0

080a01c8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a01c8:	b508      	push	{r3, lr}
 80a01ca:	4b02      	ldr	r3, [pc, #8]	; (80a01d4 <HAL_SPI_Init+0xc>)
 80a01cc:	681b      	ldr	r3, [r3, #0]
 80a01ce:	69db      	ldr	r3, [r3, #28]
 80a01d0:	9301      	str	r3, [sp, #4]
 80a01d2:	bd08      	pop	{r3, pc}
 80a01d4:	080601b4 	.word	0x080601b4

080a01d8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a01d8:	b508      	push	{r3, lr}
 80a01da:	4b02      	ldr	r3, [pc, #8]	; (80a01e4 <HAL_USART_Init+0xc>)
 80a01dc:	681b      	ldr	r3, [r3, #0]
 80a01de:	699b      	ldr	r3, [r3, #24]
 80a01e0:	9301      	str	r3, [sp, #4]
 80a01e2:	bd08      	pop	{r3, pc}
 80a01e4:	080601c4 	.word	0x080601c4

080a01e8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a01e8:	b508      	push	{r3, lr}
 80a01ea:	4b02      	ldr	r3, [pc, #8]	; (80a01f4 <HAL_USART_Write_Data+0xc>)
 80a01ec:	681b      	ldr	r3, [r3, #0]
 80a01ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a01f0:	9301      	str	r3, [sp, #4]
 80a01f2:	bd08      	pop	{r3, pc}
 80a01f4:	080601c4 	.word	0x080601c4

080a01f8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a01f8:	b508      	push	{r3, lr}
 80a01fa:	4b02      	ldr	r3, [pc, #8]	; (80a0204 <HAL_USART_Available_Data+0xc>)
 80a01fc:	681b      	ldr	r3, [r3, #0]
 80a01fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0200:	9301      	str	r3, [sp, #4]
 80a0202:	bd08      	pop	{r3, pc}
 80a0204:	080601c4 	.word	0x080601c4

080a0208 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0208:	b508      	push	{r3, lr}
 80a020a:	4b02      	ldr	r3, [pc, #8]	; (80a0214 <HAL_USART_Read_Data+0xc>)
 80a020c:	681b      	ldr	r3, [r3, #0]
 80a020e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0210:	9301      	str	r3, [sp, #4]
 80a0212:	bd08      	pop	{r3, pc}
 80a0214:	080601c4 	.word	0x080601c4

080a0218 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0218:	b508      	push	{r3, lr}
 80a021a:	4b02      	ldr	r3, [pc, #8]	; (80a0224 <HAL_USART_Peek_Data+0xc>)
 80a021c:	681b      	ldr	r3, [r3, #0]
 80a021e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0220:	9301      	str	r3, [sp, #4]
 80a0222:	bd08      	pop	{r3, pc}
 80a0224:	080601c4 	.word	0x080601c4

080a0228 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0228:	b508      	push	{r3, lr}
 80a022a:	4b02      	ldr	r3, [pc, #8]	; (80a0234 <HAL_USART_Flush_Data+0xc>)
 80a022c:	681b      	ldr	r3, [r3, #0]
 80a022e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0230:	9301      	str	r3, [sp, #4]
 80a0232:	bd08      	pop	{r3, pc}
 80a0234:	080601c4 	.word	0x080601c4

080a0238 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0238:	b508      	push	{r3, lr}
 80a023a:	4b02      	ldr	r3, [pc, #8]	; (80a0244 <HAL_USART_Available_Data_For_Write+0xc>)
 80a023c:	681b      	ldr	r3, [r3, #0]
 80a023e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0240:	9301      	str	r3, [sp, #4]
 80a0242:	bd08      	pop	{r3, pc}
 80a0244:	080601c4 	.word	0x080601c4

080a0248 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80a0248:	b508      	push	{r3, lr}
 80a024a:	4b02      	ldr	r3, [pc, #8]	; (80a0254 <HAL_USART_BeginConfig+0xc>)
 80a024c:	681b      	ldr	r3, [r3, #0]
 80a024e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0250:	9301      	str	r3, [sp, #4]
 80a0252:	bd08      	pop	{r3, pc}
 80a0254:	080601c4 	.word	0x080601c4

080a0258 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0258:	b508      	push	{r3, lr}
 80a025a:	4b02      	ldr	r3, [pc, #8]	; (80a0264 <HAL_USB_USART_Init+0xc>)
 80a025c:	681b      	ldr	r3, [r3, #0]
 80a025e:	681b      	ldr	r3, [r3, #0]
 80a0260:	9301      	str	r3, [sp, #4]
 80a0262:	bd08      	pop	{r3, pc}
 80a0264:	080601d8 	.word	0x080601d8

080a0268 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0268:	b508      	push	{r3, lr}
 80a026a:	4b02      	ldr	r3, [pc, #8]	; (80a0274 <HAL_USB_USART_Begin+0xc>)
 80a026c:	681b      	ldr	r3, [r3, #0]
 80a026e:	685b      	ldr	r3, [r3, #4]
 80a0270:	9301      	str	r3, [sp, #4]
 80a0272:	bd08      	pop	{r3, pc}
 80a0274:	080601d8 	.word	0x080601d8

080a0278 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0278:	b508      	push	{r3, lr}
 80a027a:	4b02      	ldr	r3, [pc, #8]	; (80a0284 <HAL_USB_USART_Available_Data+0xc>)
 80a027c:	681b      	ldr	r3, [r3, #0]
 80a027e:	691b      	ldr	r3, [r3, #16]
 80a0280:	9301      	str	r3, [sp, #4]
 80a0282:	bd08      	pop	{r3, pc}
 80a0284:	080601d8 	.word	0x080601d8

080a0288 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0288:	b508      	push	{r3, lr}
 80a028a:	4b02      	ldr	r3, [pc, #8]	; (80a0294 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a028c:	681b      	ldr	r3, [r3, #0]
 80a028e:	695b      	ldr	r3, [r3, #20]
 80a0290:	9301      	str	r3, [sp, #4]
 80a0292:	bd08      	pop	{r3, pc}
 80a0294:	080601d8 	.word	0x080601d8

080a0298 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0298:	b508      	push	{r3, lr}
 80a029a:	4b02      	ldr	r3, [pc, #8]	; (80a02a4 <HAL_USB_USART_Receive_Data+0xc>)
 80a029c:	681b      	ldr	r3, [r3, #0]
 80a029e:	699b      	ldr	r3, [r3, #24]
 80a02a0:	9301      	str	r3, [sp, #4]
 80a02a2:	bd08      	pop	{r3, pc}
 80a02a4:	080601d8 	.word	0x080601d8

080a02a8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a02a8:	b508      	push	{r3, lr}
 80a02aa:	4b02      	ldr	r3, [pc, #8]	; (80a02b4 <HAL_USB_USART_Send_Data+0xc>)
 80a02ac:	681b      	ldr	r3, [r3, #0]
 80a02ae:	69db      	ldr	r3, [r3, #28]
 80a02b0:	9301      	str	r3, [sp, #4]
 80a02b2:	bd08      	pop	{r3, pc}
 80a02b4:	080601d8 	.word	0x080601d8

080a02b8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a02b8:	b508      	push	{r3, lr}
 80a02ba:	4b02      	ldr	r3, [pc, #8]	; (80a02c4 <HAL_USB_USART_Flush_Data+0xc>)
 80a02bc:	681b      	ldr	r3, [r3, #0]
 80a02be:	6a1b      	ldr	r3, [r3, #32]
 80a02c0:	9301      	str	r3, [sp, #4]
 80a02c2:	bd08      	pop	{r3, pc}
 80a02c4:	080601d8 	.word	0x080601d8

080a02c8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a02c8:	b508      	push	{r3, lr}
 80a02ca:	4b02      	ldr	r3, [pc, #8]	; (80a02d4 <set_system_mode+0xc>)
 80a02cc:	681b      	ldr	r3, [r3, #0]
 80a02ce:	685b      	ldr	r3, [r3, #4]
 80a02d0:	9301      	str	r3, [sp, #4]
 80a02d2:	bd08      	pop	{r3, pc}
 80a02d4:	080601a4 	.word	0x080601a4

080a02d8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a02d8:	b508      	push	{r3, lr}
 80a02da:	4b02      	ldr	r3, [pc, #8]	; (80a02e4 <system_delay_ms+0xc>)
 80a02dc:	681b      	ldr	r3, [r3, #0]
 80a02de:	695b      	ldr	r3, [r3, #20]
 80a02e0:	9301      	str	r3, [sp, #4]
 80a02e2:	bd08      	pop	{r3, pc}
 80a02e4:	080601a4 	.word	0x080601a4

080a02e8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a02e8:	b508      	push	{r3, lr}
 80a02ea:	4b03      	ldr	r3, [pc, #12]	; (80a02f8 <system_ctrl_set_app_request_handler+0x10>)
 80a02ec:	681b      	ldr	r3, [r3, #0]
 80a02ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a02f2:	9301      	str	r3, [sp, #4]
 80a02f4:	bd08      	pop	{r3, pc}
 80a02f6:	0000      	.short	0x0000
 80a02f8:	080601a4 	.word	0x080601a4

080a02fc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a02fc:	b508      	push	{r3, lr}
 80a02fe:	4b03      	ldr	r3, [pc, #12]	; (80a030c <system_ctrl_set_result+0x10>)
 80a0300:	681b      	ldr	r3, [r3, #0]
 80a0302:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0306:	9301      	str	r3, [sp, #4]
 80a0308:	bd08      	pop	{r3, pc}
 80a030a:	0000      	.short	0x0000
 80a030c:	080601a4 	.word	0x080601a4

080a0310 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0310:	b508      	push	{r3, lr}
 80a0312:	4b02      	ldr	r3, [pc, #8]	; (80a031c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0314:	681b      	ldr	r3, [r3, #0]
 80a0316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0318:	9301      	str	r3, [sp, #4]
 80a031a:	bd08      	pop	{r3, pc}
 80a031c:	080601cc 	.word	0x080601cc

080a0320 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0320:	b508      	push	{r3, lr}
 80a0322:	4b02      	ldr	r3, [pc, #8]	; (80a032c <network_ready+0xc>)
 80a0324:	681b      	ldr	r3, [r3, #0]
 80a0326:	691b      	ldr	r3, [r3, #16]
 80a0328:	9301      	str	r3, [sp, #4]
 80a032a:	bd08      	pop	{r3, pc}
 80a032c:	080601c8 	.word	0x080601c8

080a0330 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0330:	b508      	push	{r3, lr}
 80a0332:	4b02      	ldr	r3, [pc, #8]	; (80a033c <malloc+0xc>)
 80a0334:	681b      	ldr	r3, [r3, #0]
 80a0336:	681b      	ldr	r3, [r3, #0]
 80a0338:	9301      	str	r3, [sp, #4]
 80a033a:	bd08      	pop	{r3, pc}
 80a033c:	080601a0 	.word	0x080601a0

080a0340 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0340:	b508      	push	{r3, lr}
 80a0342:	4b02      	ldr	r3, [pc, #8]	; (80a034c <free+0xc>)
 80a0344:	681b      	ldr	r3, [r3, #0]
 80a0346:	685b      	ldr	r3, [r3, #4]
 80a0348:	9301      	str	r3, [sp, #4]
 80a034a:	bd08      	pop	{r3, pc}
 80a034c:	080601a0 	.word	0x080601a0

080a0350 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0350:	2100      	movs	r1, #0
 80a0352:	f7ff bfc1 	b.w	80a02d8 <system_delay_ms>

080a0356 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0356:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0358:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a035a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a035c:	b113      	cbz	r3, 80a0364 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a035e:	2203      	movs	r2, #3
 80a0360:	4601      	mov	r1, r0
 80a0362:	4798      	blx	r3
    }
 80a0364:	4620      	mov	r0, r4
 80a0366:	bd10      	pop	{r4, pc}

080a0368 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0368:	4770      	bx	lr

080a036a <_ZN9IPAddressD0Ev>:
 80a036a:	b510      	push	{r4, lr}
 80a036c:	4604      	mov	r4, r0
 80a036e:	f7ff fe94 	bl	80a009a <_ZdlPv>
 80a0372:	4620      	mov	r0, r4
 80a0374:	bd10      	pop	{r4, pc}

080a0376 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0378:	460f      	mov	r7, r1
 80a037a:	f100 0608 	add.w	r6, r0, #8
 80a037e:	1d05      	adds	r5, r0, #4
 80a0380:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0382:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0386:	220a      	movs	r2, #10
 80a0388:	4638      	mov	r0, r7
 80a038a:	f000 f89c 	bl	80a04c6 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a038e:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0390:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0392:	d007      	beq.n	80a03a4 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0394:	2c00      	cmp	r4, #0
 80a0396:	d0f4      	beq.n	80a0382 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0398:	212e      	movs	r1, #46	; 0x2e
 80a039a:	4638      	mov	r0, r7
 80a039c:	f000 f850 	bl	80a0440 <_ZN5Print5printEc>
 80a03a0:	4404      	add	r4, r0
 80a03a2:	e7ee      	b.n	80a0382 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a03a4:	4620      	mov	r0, r4
 80a03a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a03a8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a03a8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a03aa:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a03ae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a03b2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a03b6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a03ba:	2304      	movs	r3, #4
 80a03bc:	6041      	str	r1, [r0, #4]
 80a03be:	7503      	strb	r3, [r0, #20]
 80a03c0:	bd10      	pop	{r4, pc}
	...

080a03c4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a03c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a03c6:	4d04      	ldr	r5, [pc, #16]	; (80a03d8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a03c8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a03ca:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a03ce:	9500      	str	r5, [sp, #0]
 80a03d0:	f7ff ffea 	bl	80a03a8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a03d4:	b003      	add	sp, #12
 80a03d6:	bd30      	pop	{r4, r5, pc}
 80a03d8:	080a0eac 	.word	0x080a0eac

080a03dc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a03dc:	4a01      	ldr	r2, [pc, #4]	; (80a03e4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a03de:	4b02      	ldr	r3, [pc, #8]	; (80a03e8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a03e0:	601a      	str	r2, [r3, #0]
 80a03e2:	4770      	bx	lr
 80a03e4:	080a0f73 	.word	0x080a0f73
 80a03e8:	20000370 	.word	0x20000370

080a03ec <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a03ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a03ee:	4606      	mov	r6, r0
 80a03f0:	460d      	mov	r5, r1
 80a03f2:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a03f4:	2400      	movs	r4, #0
  while (size--) {
 80a03f6:	42bd      	cmp	r5, r7
 80a03f8:	d00c      	beq.n	80a0414 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a03fa:	6833      	ldr	r3, [r6, #0]
 80a03fc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0400:	689b      	ldr	r3, [r3, #8]
 80a0402:	4630      	mov	r0, r6
 80a0404:	4798      	blx	r3
     if (chunk>=0)
 80a0406:	2800      	cmp	r0, #0
 80a0408:	db01      	blt.n	80a040e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a040a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a040c:	e7f3      	b.n	80a03f6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a040e:	2c00      	cmp	r4, #0
 80a0410:	bf08      	it	eq
 80a0412:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0414:	4620      	mov	r0, r4
 80a0416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0418 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0418:	b570      	push	{r4, r5, r6, lr}
 80a041a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a041c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a041e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0420:	b149      	cbz	r1, 80a0436 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0422:	f000 fc89 	bl	80a0d38 <strlen>
 80a0426:	682b      	ldr	r3, [r5, #0]
 80a0428:	4602      	mov	r2, r0
 80a042a:	4621      	mov	r1, r4
 80a042c:	4628      	mov	r0, r5
    }
 80a042e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0432:	68db      	ldr	r3, [r3, #12]
 80a0434:	4718      	bx	r3
    }
 80a0436:	bd70      	pop	{r4, r5, r6, pc}

080a0438 <_ZN5Print5printEPKc>:
 80a0438:	b508      	push	{r3, lr}
 80a043a:	f7ff ffed 	bl	80a0418 <_ZN5Print5writeEPKc>
 80a043e:	bd08      	pop	{r3, pc}

080a0440 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0440:	6803      	ldr	r3, [r0, #0]
 80a0442:	689b      	ldr	r3, [r3, #8]
 80a0444:	4718      	bx	r3

080a0446 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0446:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0448:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a044a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a044c:	f7ff fff8 	bl	80a0440 <_ZN5Print5printEc>
  n += print('\n');
 80a0450:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a0452:	4604      	mov	r4, r0
  n += print('\n');
 80a0454:	4628      	mov	r0, r5
 80a0456:	f7ff fff3 	bl	80a0440 <_ZN5Print5printEc>
  return n;
}
 80a045a:	4420      	add	r0, r4
 80a045c:	bd38      	pop	{r3, r4, r5, pc}

080a045e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a045e:	b538      	push	{r3, r4, r5, lr}
 80a0460:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0462:	f7ff ffd9 	bl	80a0418 <_ZN5Print5writeEPKc>
 80a0466:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a0468:	4628      	mov	r0, r5
 80a046a:	f7ff ffec 	bl	80a0446 <_ZN5Print7printlnEv>
  return n;
}
 80a046e:	4420      	add	r0, r4
 80a0470:	bd38      	pop	{r3, r4, r5, pc}

080a0472 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0472:	2a01      	cmp	r2, #1
 80a0474:	bf98      	it	ls
 80a0476:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0478:	b530      	push	{r4, r5, lr}
 80a047a:	460b      	mov	r3, r1
 80a047c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a047e:	2100      	movs	r1, #0
 80a0480:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0484:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0488:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a048c:	fb05 3312 	mls	r3, r5, r2, r3
 80a0490:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0492:	2b09      	cmp	r3, #9
 80a0494:	bf94      	ite	ls
 80a0496:	3330      	addls	r3, #48	; 0x30
 80a0498:	3337      	addhi	r3, #55	; 0x37
 80a049a:	b2db      	uxtb	r3, r3
 80a049c:	4621      	mov	r1, r4
 80a049e:	f804 3901 	strb.w	r3, [r4], #-1
 80a04a2:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a04a4:	2d00      	cmp	r5, #0
 80a04a6:	d1ef      	bne.n	80a0488 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a04a8:	f7ff ffb6 	bl	80a0418 <_ZN5Print5writeEPKc>
}
 80a04ac:	b00b      	add	sp, #44	; 0x2c
 80a04ae:	bd30      	pop	{r4, r5, pc}

080a04b0 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a04b0:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a04b2:	b922      	cbnz	r2, 80a04be <_ZN5Print5printEmi+0xe>
 80a04b4:	6803      	ldr	r3, [r0, #0]
 80a04b6:	b2c9      	uxtb	r1, r1
 80a04b8:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a04ba:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a04bc:	4718      	bx	r3
  else return printNumber(n, base);
 80a04be:	b2d2      	uxtb	r2, r2
}
 80a04c0:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a04c2:	f7ff bfd6 	b.w	80a0472 <_ZN5Print11printNumberEmh>

080a04c6 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a04c6:	f7ff bff3 	b.w	80a04b0 <_ZN5Print5printEmi>

080a04ca <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a04ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a04ce:	4607      	mov	r7, r0
 80a04d0:	460e      	mov	r6, r1
  if (base == 0) {
 80a04d2:	4615      	mov	r5, r2
 80a04d4:	b92a      	cbnz	r2, 80a04e2 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a04d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a04da:	6803      	ldr	r3, [r0, #0]
 80a04dc:	b2c9      	uxtb	r1, r1
 80a04de:	689b      	ldr	r3, [r3, #8]
 80a04e0:	4718      	bx	r3
  } else if (base == 10) {
 80a04e2:	2a0a      	cmp	r2, #10
 80a04e4:	d102      	bne.n	80a04ec <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a04e6:	2900      	cmp	r1, #0
 80a04e8:	da01      	bge.n	80a04ee <_ZN5Print5printEli+0x24>
 80a04ea:	e004      	b.n	80a04f6 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a04ec:	b2d2      	uxtb	r2, r2
  }
}
 80a04ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a04f2:	f7ff bfbe 	b.w	80a0472 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a04f6:	212d      	movs	r1, #45	; 0x2d
 80a04f8:	f7ff ffa2 	bl	80a0440 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a04fc:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a04fe:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a0500:	4271      	negs	r1, r6
 80a0502:	4638      	mov	r0, r7
 80a0504:	f7ff ffb5 	bl	80a0472 <_ZN5Print11printNumberEmh>
 80a0508:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a050a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a050e <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a050e:	b538      	push	{r3, r4, r5, lr}
 80a0510:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a0512:	f7ff ffda 	bl	80a04ca <_ZN5Print5printEli>
 80a0516:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a0518:	4628      	mov	r0, r5
 80a051a:	f7ff ff94 	bl	80a0446 <_ZN5Print7printlnEv>
  return n;
}
 80a051e:	4420      	add	r0, r4
 80a0520:	bd38      	pop	{r3, r4, r5, pc}

080a0522 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0522:	b510      	push	{r4, lr}
 80a0524:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0526:	f7ff ff16 	bl	80a0356 <_ZNSt14_Function_baseD1Ev>
 80a052a:	4620      	mov	r0, r4
 80a052c:	bd10      	pop	{r4, pc}
	...

080a0530 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0530:	4803      	ldr	r0, [pc, #12]	; (80a0540 <_GLOBAL__sub_I_RGB+0x10>)
 80a0532:	2300      	movs	r3, #0
 80a0534:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0536:	4a03      	ldr	r2, [pc, #12]	; (80a0544 <_GLOBAL__sub_I_RGB+0x14>)
 80a0538:	4903      	ldr	r1, [pc, #12]	; (80a0548 <_GLOBAL__sub_I_RGB+0x18>)
 80a053a:	f000 ba61 	b.w	80a0a00 <__aeabi_atexit>
 80a053e:	bf00      	nop
 80a0540:	20000374 	.word	0x20000374
 80a0544:	2000036c 	.word	0x2000036c
 80a0548:	080a0523 	.word	0x080a0523

080a054c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a054c:	4770      	bx	lr

080a054e <_ZN8SPIClassD0Ev>:
 80a054e:	b510      	push	{r4, lr}
 80a0550:	4604      	mov	r4, r0
 80a0552:	f7ff fda2 	bl	80a009a <_ZdlPv>
 80a0556:	4620      	mov	r0, r4
 80a0558:	bd10      	pop	{r4, pc}
	...

080a055c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a055c:	b570      	push	{r4, r5, r6, lr}
 80a055e:	4604      	mov	r4, r0
 80a0560:	460e      	mov	r6, r1
 80a0562:	4b07      	ldr	r3, [pc, #28]	; (80a0580 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0564:	2500      	movs	r5, #0
 80a0566:	6003      	str	r3, [r0, #0]
 80a0568:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a056c:	f7ff fe04 	bl	80a0178 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0570:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0572:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0574:	f7ff fe28 	bl	80a01c8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0578:	60a5      	str	r5, [r4, #8]
}
 80a057a:	4620      	mov	r0, r4
 80a057c:	bd70      	pop	{r4, r5, r6, pc}
 80a057e:	bf00      	nop
 80a0580:	080a0fa4 	.word	0x080a0fa4

080a0584 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0584:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 80a0588:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a058a:	4c0d      	ldr	r4, [pc, #52]	; (80a05c0 <_GLOBAL__sub_I_System+0x3c>)
 80a058c:	2500      	movs	r5, #0
 80a058e:	8063      	strh	r3, [r4, #2]
 80a0590:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0594:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0596:	80a3      	strh	r3, [r4, #4]
 80a0598:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a059a:	f7ff fe95 	bl	80a02c8 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a059e:	a802      	add	r0, sp, #8
 80a05a0:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a05a4:	462a      	mov	r2, r5
 80a05a6:	4629      	mov	r1, r5
 80a05a8:	f7ff fdee 	bl	80a0188 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a05ac:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a05ae:	2b1e      	cmp	r3, #30
 80a05b0:	d104      	bne.n	80a05bc <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a05b2:	2303      	movs	r3, #3
 80a05b4:	7023      	strb	r3, [r4, #0]
 80a05b6:	2311      	movs	r3, #17
 80a05b8:	8065      	strh	r5, [r4, #2]
 80a05ba:	80a3      	strh	r3, [r4, #4]
 80a05bc:	b003      	add	sp, #12
 80a05be:	bd30      	pop	{r4, r5, pc}
 80a05c0:	20000384 	.word	0x20000384

080a05c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a05c4:	4b02      	ldr	r3, [pc, #8]	; (80a05d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a05c6:	681a      	ldr	r2, [r3, #0]
 80a05c8:	4b02      	ldr	r3, [pc, #8]	; (80a05d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a05ca:	601a      	str	r2, [r3, #0]
 80a05cc:	4770      	bx	lr
 80a05ce:	bf00      	nop
 80a05d0:	20000300 	.word	0x20000300
 80a05d4:	2000038c 	.word	0x2000038c

080a05d8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a05d8:	4770      	bx	lr

080a05da <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a05da:	7441      	strb	r1, [r0, #17]
 80a05dc:	4770      	bx	lr

080a05de <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a05de:	7c00      	ldrb	r0, [r0, #16]
 80a05e0:	f7ff be2a 	b.w	80a0238 <HAL_USART_Available_Data_For_Write>

080a05e4 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a05e4:	7c00      	ldrb	r0, [r0, #16]
 80a05e6:	f7ff be07 	b.w	80a01f8 <HAL_USART_Available_Data>

080a05ea <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a05ea:	7c00      	ldrb	r0, [r0, #16]
 80a05ec:	f7ff be14 	b.w	80a0218 <HAL_USART_Peek_Data>

080a05f0 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a05f0:	7c00      	ldrb	r0, [r0, #16]
 80a05f2:	f7ff be09 	b.w	80a0208 <HAL_USART_Read_Data>

080a05f6 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a05f6:	7c00      	ldrb	r0, [r0, #16]
 80a05f8:	f7ff be16 	b.w	80a0228 <HAL_USART_Flush_Data>

080a05fc <_ZN11USARTSerialD0Ev>:
 80a05fc:	b510      	push	{r4, lr}
 80a05fe:	4604      	mov	r4, r0
 80a0600:	f7ff fd4b 	bl	80a009a <_ZdlPv>
 80a0604:	4620      	mov	r0, r4
 80a0606:	bd10      	pop	{r4, pc}

080a0608 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0608:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a060a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a060c:	4604      	mov	r4, r0
 80a060e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0610:	b925      	cbnz	r5, 80a061c <_ZN11USARTSerial5writeEh+0x14>
 80a0612:	7c00      	ldrb	r0, [r0, #16]
 80a0614:	f7ff fe10 	bl	80a0238 <HAL_USART_Available_Data_For_Write>
 80a0618:	2800      	cmp	r0, #0
 80a061a:	dd05      	ble.n	80a0628 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a061c:	4631      	mov	r1, r6
 80a061e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0620:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0624:	f7ff bde0 	b.w	80a01e8 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0628:	4628      	mov	r0, r5
 80a062a:	bd70      	pop	{r4, r5, r6, pc}

080a062c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a062c:	b510      	push	{r4, lr}
 80a062e:	4604      	mov	r4, r0
 80a0630:	4608      	mov	r0, r1
 80a0632:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0634:	2200      	movs	r2, #0
 80a0636:	6062      	str	r2, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0638:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a063c:	60a2      	str	r2, [r4, #8]
 80a063e:	4a05      	ldr	r2, [pc, #20]	; (80a0654 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0640:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0642:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0644:	2201      	movs	r2, #1
 80a0646:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0648:	461a      	mov	r2, r3
 80a064a:	f7ff fdc5 	bl	80a01d8 <HAL_USART_Init>
}
 80a064e:	4620      	mov	r0, r4
 80a0650:	bd10      	pop	{r4, pc}
 80a0652:	bf00      	nop
 80a0654:	080a0fe0 	.word	0x080a0fe0

080a0658 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80a0658:	2300      	movs	r3, #0
 80a065a:	7c00      	ldrb	r0, [r0, #16]
 80a065c:	f7ff bdf4 	b.w	80a0248 <HAL_USART_BeginConfig>

080a0660 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80a0660:	2200      	movs	r2, #0
 80a0662:	f7ff bff9 	b.w	80a0658 <_ZN11USARTSerial5beginEmm>
	...

080a0668 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0668:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a066a:	4d0c      	ldr	r5, [pc, #48]	; (80a069c <_Z22__fetch_global_Serial1v+0x34>)
 80a066c:	6829      	ldr	r1, [r5, #0]
 80a066e:	f011 0401 	ands.w	r4, r1, #1
 80a0672:	d111      	bne.n	80a0698 <_Z22__fetch_global_Serial1v+0x30>
 80a0674:	4628      	mov	r0, r5
 80a0676:	f7ff fd12 	bl	80a009e <__cxa_guard_acquire>
 80a067a:	b168      	cbz	r0, 80a0698 <_Z22__fetch_global_Serial1v+0x30>
 80a067c:	4a08      	ldr	r2, [pc, #32]	; (80a06a0 <_Z22__fetch_global_Serial1v+0x38>)
 80a067e:	4621      	mov	r1, r4
 80a0680:	4b08      	ldr	r3, [pc, #32]	; (80a06a4 <_Z22__fetch_global_Serial1v+0x3c>)
 80a0682:	4809      	ldr	r0, [pc, #36]	; (80a06a8 <_Z22__fetch_global_Serial1v+0x40>)
 80a0684:	f7ff ffd2 	bl	80a062c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0688:	4628      	mov	r0, r5
 80a068a:	f7ff fd0d 	bl	80a00a8 <__cxa_guard_release>
 80a068e:	4a07      	ldr	r2, [pc, #28]	; (80a06ac <_Z22__fetch_global_Serial1v+0x44>)
 80a0690:	4907      	ldr	r1, [pc, #28]	; (80a06b0 <_Z22__fetch_global_Serial1v+0x48>)
 80a0692:	4805      	ldr	r0, [pc, #20]	; (80a06a8 <_Z22__fetch_global_Serial1v+0x40>)
 80a0694:	f000 f9b4 	bl	80a0a00 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0698:	4803      	ldr	r0, [pc, #12]	; (80a06a8 <_Z22__fetch_global_Serial1v+0x40>)
 80a069a:	bd38      	pop	{r3, r4, r5, pc}
 80a069c:	20000428 	.word	0x20000428
 80a06a0:	2000042c 	.word	0x2000042c
 80a06a4:	200003a4 	.word	0x200003a4
 80a06a8:	20000390 	.word	0x20000390
 80a06ac:	2000036c 	.word	0x2000036c
 80a06b0:	080a05d9 	.word	0x080a05d9

080a06b4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a06b4:	7441      	strb	r1, [r0, #17]
 80a06b6:	4770      	bx	lr

080a06b8 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a06b8:	4770      	bx	lr

080a06ba <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a06ba:	2100      	movs	r1, #0
 80a06bc:	7c00      	ldrb	r0, [r0, #16]
 80a06be:	f7ff bdeb 	b.w	80a0298 <HAL_USB_USART_Receive_Data>

080a06c2 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a06c2:	2101      	movs	r1, #1
 80a06c4:	7c00      	ldrb	r0, [r0, #16]
 80a06c6:	f7ff bde7 	b.w	80a0298 <HAL_USB_USART_Receive_Data>

080a06ca <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a06ca:	7c00      	ldrb	r0, [r0, #16]
 80a06cc:	f7ff bddc 	b.w	80a0288 <HAL_USB_USART_Available_Data_For_Write>

080a06d0 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a06d0:	7c00      	ldrb	r0, [r0, #16]
 80a06d2:	f7ff bdd1 	b.w	80a0278 <HAL_USB_USART_Available_Data>

080a06d6 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a06d6:	b538      	push	{r3, r4, r5, lr}
 80a06d8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a06da:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a06dc:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a06de:	f7ff fdd3 	bl	80a0288 <HAL_USB_USART_Available_Data_For_Write>
 80a06e2:	2800      	cmp	r0, #0
 80a06e4:	dc01      	bgt.n	80a06ea <_ZN9USBSerial5writeEh+0x14>
 80a06e6:	7c60      	ldrb	r0, [r4, #17]
 80a06e8:	b120      	cbz	r0, 80a06f4 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a06ea:	4629      	mov	r1, r5
 80a06ec:	7c20      	ldrb	r0, [r4, #16]
 80a06ee:	f7ff fddb 	bl	80a02a8 <HAL_USB_USART_Send_Data>
    return 1;
 80a06f2:	2001      	movs	r0, #1
  }
  return 0;
}
 80a06f4:	bd38      	pop	{r3, r4, r5, pc}

080a06f6 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a06f6:	7c00      	ldrb	r0, [r0, #16]
 80a06f8:	f7ff bdde 	b.w	80a02b8 <HAL_USB_USART_Flush_Data>

080a06fc <_ZN9USBSerialD0Ev>:
 80a06fc:	b510      	push	{r4, lr}
 80a06fe:	4604      	mov	r4, r0
 80a0700:	f7ff fccb 	bl	80a009a <_ZdlPv>
 80a0704:	4620      	mov	r0, r4
 80a0706:	bd10      	pop	{r4, pc}

080a0708 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0708:	b510      	push	{r4, lr}
 80a070a:	4604      	mov	r4, r0
 80a070c:	2300      	movs	r3, #0
 80a070e:	6063      	str	r3, [r4, #4]
 80a0710:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0714:	60a3      	str	r3, [r4, #8]
 80a0716:	4b05      	ldr	r3, [pc, #20]	; (80a072c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0718:	4608      	mov	r0, r1
 80a071a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a071c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a071e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0720:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0722:	4611      	mov	r1, r2
 80a0724:	f7ff fd98 	bl	80a0258 <HAL_USB_USART_Init>
}
 80a0728:	4620      	mov	r0, r4
 80a072a:	bd10      	pop	{r4, pc}
 80a072c:	080a1010 	.word	0x080a1010

080a0730 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0730:	2200      	movs	r2, #0
 80a0732:	7c00      	ldrb	r0, [r0, #16]
 80a0734:	f7ff bd98 	b.w	80a0268 <HAL_USB_USART_Begin>

080a0738 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0738:	b510      	push	{r4, lr}
 80a073a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a073c:	2214      	movs	r2, #20
 80a073e:	2100      	movs	r1, #0
 80a0740:	f000 fac9 	bl	80a0cd6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0744:	4b05      	ldr	r3, [pc, #20]	; (80a075c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0746:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0748:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a074a:	4b05      	ldr	r3, [pc, #20]	; (80a0760 <_Z19acquireSerialBufferv+0x28>)
 80a074c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a074e:	f240 1301 	movw	r3, #257	; 0x101
 80a0752:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0754:	2381      	movs	r3, #129	; 0x81
 80a0756:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0758:	bd10      	pop	{r4, pc}
 80a075a:	bf00      	nop
 80a075c:	20000535 	.word	0x20000535
 80a0760:	200004b4 	.word	0x200004b4

080a0764 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0764:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0766:	4d0e      	ldr	r5, [pc, #56]	; (80a07a0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0768:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a076a:	a801      	add	r0, sp, #4
 80a076c:	f7ff ffe4 	bl	80a0738 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0770:	6829      	ldr	r1, [r5, #0]
 80a0772:	f011 0401 	ands.w	r4, r1, #1
 80a0776:	d110      	bne.n	80a079a <_Z16_fetch_usbserialv+0x36>
 80a0778:	4628      	mov	r0, r5
 80a077a:	f7ff fc90 	bl	80a009e <__cxa_guard_acquire>
 80a077e:	b160      	cbz	r0, 80a079a <_Z16_fetch_usbserialv+0x36>
 80a0780:	aa01      	add	r2, sp, #4
 80a0782:	4621      	mov	r1, r4
 80a0784:	4807      	ldr	r0, [pc, #28]	; (80a07a4 <_Z16_fetch_usbserialv+0x40>)
 80a0786:	f7ff ffbf 	bl	80a0708 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a078a:	4628      	mov	r0, r5
 80a078c:	f7ff fc8c 	bl	80a00a8 <__cxa_guard_release>
 80a0790:	4a05      	ldr	r2, [pc, #20]	; (80a07a8 <_Z16_fetch_usbserialv+0x44>)
 80a0792:	4906      	ldr	r1, [pc, #24]	; (80a07ac <_Z16_fetch_usbserialv+0x48>)
 80a0794:	4803      	ldr	r0, [pc, #12]	; (80a07a4 <_Z16_fetch_usbserialv+0x40>)
 80a0796:	f000 f933 	bl	80a0a00 <__aeabi_atexit>
	return _usbserial;
}
 80a079a:	4802      	ldr	r0, [pc, #8]	; (80a07a4 <_Z16_fetch_usbserialv+0x40>)
 80a079c:	b007      	add	sp, #28
 80a079e:	bd30      	pop	{r4, r5, pc}
 80a07a0:	200004b0 	.word	0x200004b0
 80a07a4:	20000638 	.word	0x20000638
 80a07a8:	2000036c 	.word	0x2000036c
 80a07ac:	080a06b9 	.word	0x080a06b9

080a07b0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a07b0:	b510      	push	{r4, lr}
 80a07b2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a07b4:	2214      	movs	r2, #20
 80a07b6:	2100      	movs	r1, #0
 80a07b8:	f000 fa8d 	bl	80a0cd6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a07bc:	4b05      	ldr	r3, [pc, #20]	; (80a07d4 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a07be:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a07c0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a07c2:	4b05      	ldr	r3, [pc, #20]	; (80a07d8 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a07c4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a07c6:	f240 1301 	movw	r3, #257	; 0x101
 80a07ca:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a07cc:	2381      	movs	r3, #129	; 0x81
 80a07ce:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a07d0:	bd10      	pop	{r4, pc}
 80a07d2:	bf00      	nop
 80a07d4:	200006e8 	.word	0x200006e8
 80a07d8:	20000650 	.word	0x20000650

080a07dc <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a07dc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a07de:	4c0e      	ldr	r4, [pc, #56]	; (80a0818 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a07e0:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a07e2:	a801      	add	r0, sp, #4
 80a07e4:	f7ff ffe4 	bl	80a07b0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a07e8:	6823      	ldr	r3, [r4, #0]
 80a07ea:	07db      	lsls	r3, r3, #31
 80a07ec:	d410      	bmi.n	80a0810 <_Z17_fetch_usbserial1v+0x34>
 80a07ee:	4620      	mov	r0, r4
 80a07f0:	f7ff fc55 	bl	80a009e <__cxa_guard_acquire>
 80a07f4:	b160      	cbz	r0, 80a0810 <_Z17_fetch_usbserial1v+0x34>
 80a07f6:	aa01      	add	r2, sp, #4
 80a07f8:	2101      	movs	r1, #1
 80a07fa:	4808      	ldr	r0, [pc, #32]	; (80a081c <_Z17_fetch_usbserial1v+0x40>)
 80a07fc:	f7ff ff84 	bl	80a0708 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0800:	4620      	mov	r0, r4
 80a0802:	f7ff fc51 	bl	80a00a8 <__cxa_guard_release>
 80a0806:	4a06      	ldr	r2, [pc, #24]	; (80a0820 <_Z17_fetch_usbserial1v+0x44>)
 80a0808:	4906      	ldr	r1, [pc, #24]	; (80a0824 <_Z17_fetch_usbserial1v+0x48>)
 80a080a:	4804      	ldr	r0, [pc, #16]	; (80a081c <_Z17_fetch_usbserial1v+0x40>)
 80a080c:	f000 f8f8 	bl	80a0a00 <__aeabi_atexit>
  return _usbserial1;
}
 80a0810:	4802      	ldr	r0, [pc, #8]	; (80a081c <_Z17_fetch_usbserial1v+0x40>)
 80a0812:	b006      	add	sp, #24
 80a0814:	bd10      	pop	{r4, pc}
 80a0816:	bf00      	nop
 80a0818:	2000064c 	.word	0x2000064c
 80a081c:	200006d4 	.word	0x200006d4
 80a0820:	2000036c 	.word	0x2000036c
 80a0824:	080a06b9 	.word	0x080a06b9

080a0828 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a0828:	4770      	bx	lr

080a082a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a082a:	2200      	movs	r2, #0
 80a082c:	4611      	mov	r1, r2
 80a082e:	4610      	mov	r0, r2
 80a0830:	f7ff bd76 	b.w	80a0320 <network_ready>

080a0834 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a0834:	4803      	ldr	r0, [pc, #12]	; (80a0844 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0836:	4b04      	ldr	r3, [pc, #16]	; (80a0848 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a0838:	4a04      	ldr	r2, [pc, #16]	; (80a084c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x18>)
 80a083a:	4905      	ldr	r1, [pc, #20]	; (80a0850 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x1c>)
 80a083c:	6003      	str	r3, [r0, #0]
 80a083e:	f000 b8df 	b.w	80a0a00 <__aeabi_atexit>
 80a0842:	bf00      	nop
 80a0844:	200007ec 	.word	0x200007ec
 80a0848:	080a1040 	.word	0x080a1040
 80a084c:	2000036c 	.word	0x2000036c
 80a0850:	080a0829 	.word	0x080a0829

080a0854 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0854:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0856:	4b14      	ldr	r3, [pc, #80]	; (80a08a8 <serialEventRun+0x54>)
 80a0858:	b133      	cbz	r3, 80a0868 <serialEventRun+0x14>
 80a085a:	f7ff ff83 	bl	80a0764 <_Z16_fetch_usbserialv>
 80a085e:	6803      	ldr	r3, [r0, #0]
 80a0860:	691b      	ldr	r3, [r3, #16]
 80a0862:	4798      	blx	r3
 80a0864:	2800      	cmp	r0, #0
 80a0866:	dc16      	bgt.n	80a0896 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0868:	4b10      	ldr	r3, [pc, #64]	; (80a08ac <serialEventRun+0x58>)
 80a086a:	b133      	cbz	r3, 80a087a <serialEventRun+0x26>
 80a086c:	f7ff fefc 	bl	80a0668 <_Z22__fetch_global_Serial1v>
 80a0870:	6803      	ldr	r3, [r0, #0]
 80a0872:	691b      	ldr	r3, [r3, #16]
 80a0874:	4798      	blx	r3
 80a0876:	2800      	cmp	r0, #0
 80a0878:	dc10      	bgt.n	80a089c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a087a:	4b0d      	ldr	r3, [pc, #52]	; (80a08b0 <serialEventRun+0x5c>)
 80a087c:	b10b      	cbz	r3, 80a0882 <serialEventRun+0x2e>
 80a087e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0882:	4b0c      	ldr	r3, [pc, #48]	; (80a08b4 <serialEventRun+0x60>)
 80a0884:	b17b      	cbz	r3, 80a08a6 <serialEventRun+0x52>
 80a0886:	f7ff ffa9 	bl	80a07dc <_Z17_fetch_usbserial1v>
 80a088a:	6803      	ldr	r3, [r0, #0]
 80a088c:	691b      	ldr	r3, [r3, #16]
 80a088e:	4798      	blx	r3
 80a0890:	2800      	cmp	r0, #0
 80a0892:	dc06      	bgt.n	80a08a2 <serialEventRun+0x4e>
 80a0894:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0896:	f3af 8000 	nop.w
 80a089a:	e7e5      	b.n	80a0868 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a089c:	f3af 8000 	nop.w
 80a08a0:	e7eb      	b.n	80a087a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a08a2:	f3af 8000 	nop.w
 80a08a6:	bd08      	pop	{r3, pc}
	...

080a08b8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a08b8:	b508      	push	{r3, lr}
	serialEventRun();
 80a08ba:	f7ff ffcb 	bl	80a0854 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a08be:	f7ff fc73 	bl	80a01a8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a08c2:	4b01      	ldr	r3, [pc, #4]	; (80a08c8 <_post_loop+0x10>)
 80a08c4:	6018      	str	r0, [r3, #0]
 80a08c6:	bd08      	pop	{r3, pc}
 80a08c8:	200007f8 	.word	0x200007f8

080a08cc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a08cc:	4802      	ldr	r0, [pc, #8]	; (80a08d8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a08ce:	4a03      	ldr	r2, [pc, #12]	; (80a08dc <_Z33system_initialize_user_backup_ramv+0x10>)
 80a08d0:	4903      	ldr	r1, [pc, #12]	; (80a08e0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a08d2:	1a12      	subs	r2, r2, r0
 80a08d4:	f000 b9f4 	b.w	80a0cc0 <memcpy>
 80a08d8:	40024000 	.word	0x40024000
 80a08dc:	40024004 	.word	0x40024004
 80a08e0:	080a11e0 	.word	0x080a11e0

080a08e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a08e4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a08e6:	2300      	movs	r3, #0
 80a08e8:	9300      	str	r3, [sp, #0]
 80a08ea:	461a      	mov	r2, r3
 80a08ec:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a08f0:	f7ff fd04 	bl	80a02fc <system_ctrl_set_result>
}
 80a08f4:	b003      	add	sp, #12
 80a08f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a08fc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a08fc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a08fe:	8843      	ldrh	r3, [r0, #2]
 80a0900:	2b0a      	cmp	r3, #10
 80a0902:	d008      	beq.n	80a0916 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0904:	2b50      	cmp	r3, #80	; 0x50
 80a0906:	d109      	bne.n	80a091c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0908:	4b09      	ldr	r3, [pc, #36]	; (80a0930 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a090a:	681b      	ldr	r3, [r3, #0]
 80a090c:	b13b      	cbz	r3, 80a091e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a090e:	b003      	add	sp, #12
 80a0910:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0914:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a0916:	f7ff ffe5 	bl	80a08e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a091a:	e006      	b.n	80a092a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a091c:	2300      	movs	r3, #0
 80a091e:	9300      	str	r3, [sp, #0]
 80a0920:	461a      	mov	r2, r3
 80a0922:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0926:	f7ff fce9 	bl	80a02fc <system_ctrl_set_result>
        break;
    }
}
 80a092a:	b003      	add	sp, #12
 80a092c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0930:	200007f0 	.word	0x200007f0

080a0934 <module_user_init_hook>:

void module_user_init_hook()
{
 80a0934:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0936:	4c10      	ldr	r4, [pc, #64]	; (80a0978 <module_user_init_hook+0x44>)
 80a0938:	4d10      	ldr	r5, [pc, #64]	; (80a097c <module_user_init_hook+0x48>)
 80a093a:	6823      	ldr	r3, [r4, #0]
 80a093c:	42ab      	cmp	r3, r5
 80a093e:	4b10      	ldr	r3, [pc, #64]	; (80a0980 <module_user_init_hook+0x4c>)
 80a0940:	bf0c      	ite	eq
 80a0942:	2201      	moveq	r2, #1
 80a0944:	2200      	movne	r2, #0
 80a0946:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0948:	d002      	beq.n	80a0950 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a094a:	f7ff ffbf 	bl	80a08cc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a094e:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 80a0950:	f7ff fc22 	bl	80a0198 <HAL_RNG_GetRandomNumber>
 80a0954:	f000 f9c8 	bl	80a0ce8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0958:	4b0a      	ldr	r3, [pc, #40]	; (80a0984 <module_user_init_hook+0x50>)
 80a095a:	b11b      	cbz	r3, 80a0964 <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 80a095c:	f7ff fc1c 	bl	80a0198 <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 80a0960:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0964:	2100      	movs	r1, #0
 80a0966:	4807      	ldr	r0, [pc, #28]	; (80a0984 <module_user_init_hook+0x50>)
 80a0968:	f7ff fcd2 	bl	80a0310 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a096c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0970:	2100      	movs	r1, #0
 80a0972:	4805      	ldr	r0, [pc, #20]	; (80a0988 <module_user_init_hook+0x54>)
 80a0974:	f7ff bcb8 	b.w	80a02e8 <system_ctrl_set_app_request_handler>
 80a0978:	40024000 	.word	0x40024000
 80a097c:	9a271c1e 	.word	0x9a271c1e
 80a0980:	200007f4 	.word	0x200007f4
 80a0984:	00000000 	.word	0x00000000
 80a0988:	080a08fd 	.word	0x080a08fd

080a098c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a098c:	b513      	push	{r0, r1, r4, lr}
 80a098e:	4c08      	ldr	r4, [pc, #32]	; (80a09b0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0990:	2300      	movs	r3, #0
 80a0992:	461a      	mov	r2, r3
 80a0994:	4619      	mov	r1, r3
 80a0996:	9300      	str	r3, [sp, #0]
 80a0998:	4620      	mov	r0, r4
 80a099a:	f7ff fd13 	bl	80a03c4 <_ZN9IPAddressC1Ehhhh>
 80a099e:	4620      	mov	r0, r4
 80a09a0:	4a04      	ldr	r2, [pc, #16]	; (80a09b4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a09a2:	4905      	ldr	r1, [pc, #20]	; (80a09b8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a09a4:	b002      	add	sp, #8
 80a09a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a09aa:	f000 b829 	b.w	80a0a00 <__aeabi_atexit>
 80a09ae:	bf00      	nop
 80a09b0:	200007fc 	.word	0x200007fc
 80a09b4:	2000036c 	.word	0x2000036c
 80a09b8:	080a0369 	.word	0x080a0369

080a09bc <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a09bc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a09be:	4c0c      	ldr	r4, [pc, #48]	; (80a09f0 <_GLOBAL__sub_I_SPI+0x34>)
 80a09c0:	4e0c      	ldr	r6, [pc, #48]	; (80a09f4 <_GLOBAL__sub_I_SPI+0x38>)
 80a09c2:	4d0d      	ldr	r5, [pc, #52]	; (80a09f8 <_GLOBAL__sub_I_SPI+0x3c>)
 80a09c4:	2100      	movs	r1, #0
 80a09c6:	4620      	mov	r0, r4
 80a09c8:	f7ff fdc8 	bl	80a055c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a09cc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a09ce:	4c0b      	ldr	r4, [pc, #44]	; (80a09fc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a09d0:	4632      	mov	r2, r6
 80a09d2:	4629      	mov	r1, r5
 80a09d4:	f000 f814 	bl	80a0a00 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a09d8:	2101      	movs	r1, #1
 80a09da:	4620      	mov	r0, r4
 80a09dc:	f7ff fdbe 	bl	80a055c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a09e0:	4632      	mov	r2, r6
 80a09e2:	4629      	mov	r1, r5
 80a09e4:	4620      	mov	r0, r4
 80a09e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a09ea:	f000 b809 	b.w	80a0a00 <__aeabi_atexit>
 80a09ee:	bf00      	nop
 80a09f0:	20000814 	.word	0x20000814
 80a09f4:	2000036c 	.word	0x2000036c
 80a09f8:	080a054d 	.word	0x080a054d
 80a09fc:	20000824 	.word	0x20000824

080a0a00 <__aeabi_atexit>:
 80a0a00:	460b      	mov	r3, r1
 80a0a02:	4601      	mov	r1, r0
 80a0a04:	4618      	mov	r0, r3
 80a0a06:	f000 b94d 	b.w	80a0ca4 <__cxa_atexit>
	...

080a0a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a0a0c:	4b24      	ldr	r3, [pc, #144]	; (80a0aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a0a0e:	681a      	ldr	r2, [r3, #0]
 80a0a10:	07d0      	lsls	r0, r2, #31
 80a0a12:	bf5c      	itt	pl
 80a0a14:	2201      	movpl	r2, #1
 80a0a16:	601a      	strpl	r2, [r3, #0]
 80a0a18:	4b22      	ldr	r3, [pc, #136]	; (80a0aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a0a1a:	681a      	ldr	r2, [r3, #0]
 80a0a1c:	07d1      	lsls	r1, r2, #31
 80a0a1e:	bf5c      	itt	pl
 80a0a20:	2201      	movpl	r2, #1
 80a0a22:	601a      	strpl	r2, [r3, #0]
 80a0a24:	4b20      	ldr	r3, [pc, #128]	; (80a0aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a0a26:	681a      	ldr	r2, [r3, #0]
 80a0a28:	07d2      	lsls	r2, r2, #31
 80a0a2a:	bf5c      	itt	pl
 80a0a2c:	2201      	movpl	r2, #1
 80a0a2e:	601a      	strpl	r2, [r3, #0]
 80a0a30:	4b1e      	ldr	r3, [pc, #120]	; (80a0aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a0a32:	681a      	ldr	r2, [r3, #0]
 80a0a34:	07d0      	lsls	r0, r2, #31
 80a0a36:	bf5c      	itt	pl
 80a0a38:	2201      	movpl	r2, #1
 80a0a3a:	601a      	strpl	r2, [r3, #0]
 80a0a3c:	4b1c      	ldr	r3, [pc, #112]	; (80a0ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a0a3e:	681a      	ldr	r2, [r3, #0]
 80a0a40:	07d1      	lsls	r1, r2, #31
 80a0a42:	bf5c      	itt	pl
 80a0a44:	2201      	movpl	r2, #1
 80a0a46:	601a      	strpl	r2, [r3, #0]
 80a0a48:	4b1a      	ldr	r3, [pc, #104]	; (80a0ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a0a4a:	681a      	ldr	r2, [r3, #0]
 80a0a4c:	07d2      	lsls	r2, r2, #31
 80a0a4e:	bf5c      	itt	pl
 80a0a50:	2201      	movpl	r2, #1
 80a0a52:	601a      	strpl	r2, [r3, #0]
 80a0a54:	4b18      	ldr	r3, [pc, #96]	; (80a0ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a0a56:	681a      	ldr	r2, [r3, #0]
 80a0a58:	07d0      	lsls	r0, r2, #31
 80a0a5a:	bf5c      	itt	pl
 80a0a5c:	2201      	movpl	r2, #1
 80a0a5e:	601a      	strpl	r2, [r3, #0]
 80a0a60:	4b16      	ldr	r3, [pc, #88]	; (80a0abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a0a62:	681a      	ldr	r2, [r3, #0]
 80a0a64:	07d1      	lsls	r1, r2, #31
 80a0a66:	bf5c      	itt	pl
 80a0a68:	2201      	movpl	r2, #1
 80a0a6a:	601a      	strpl	r2, [r3, #0]
 80a0a6c:	4b14      	ldr	r3, [pc, #80]	; (80a0ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a0a6e:	681a      	ldr	r2, [r3, #0]
 80a0a70:	07d2      	lsls	r2, r2, #31
 80a0a72:	bf5c      	itt	pl
 80a0a74:	2201      	movpl	r2, #1
 80a0a76:	601a      	strpl	r2, [r3, #0]
 80a0a78:	4b12      	ldr	r3, [pc, #72]	; (80a0ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a0a7a:	681a      	ldr	r2, [r3, #0]
 80a0a7c:	07d0      	lsls	r0, r2, #31
 80a0a7e:	bf5c      	itt	pl
 80a0a80:	2201      	movpl	r2, #1
 80a0a82:	601a      	strpl	r2, [r3, #0]
 80a0a84:	4b10      	ldr	r3, [pc, #64]	; (80a0ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a0a86:	681a      	ldr	r2, [r3, #0]
 80a0a88:	07d1      	lsls	r1, r2, #31
 80a0a8a:	bf5c      	itt	pl
 80a0a8c:	2201      	movpl	r2, #1
 80a0a8e:	601a      	strpl	r2, [r3, #0]
 80a0a90:	4b0e      	ldr	r3, [pc, #56]	; (80a0acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a0a92:	681a      	ldr	r2, [r3, #0]
 80a0a94:	07d2      	lsls	r2, r2, #31
 80a0a96:	bf5c      	itt	pl
 80a0a98:	2201      	movpl	r2, #1
 80a0a9a:	601a      	strpl	r2, [r3, #0]
 80a0a9c:	4770      	bx	lr
 80a0a9e:	bf00      	nop
 80a0aa0:	20000860 	.word	0x20000860
 80a0aa4:	2000085c 	.word	0x2000085c
 80a0aa8:	20000858 	.word	0x20000858
 80a0aac:	20000854 	.word	0x20000854
 80a0ab0:	20000850 	.word	0x20000850
 80a0ab4:	2000084c 	.word	0x2000084c
 80a0ab8:	20000848 	.word	0x20000848
 80a0abc:	20000844 	.word	0x20000844
 80a0ac0:	20000840 	.word	0x20000840
 80a0ac4:	2000083c 	.word	0x2000083c
 80a0ac8:	20000838 	.word	0x20000838
 80a0acc:	20000834 	.word	0x20000834

080a0ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0ad0:	4b18      	ldr	r3, [pc, #96]	; (80a0b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0ad2:	681a      	ldr	r2, [r3, #0]
 80a0ad4:	07d1      	lsls	r1, r2, #31
 80a0ad6:	bf5c      	itt	pl
 80a0ad8:	2201      	movpl	r2, #1
 80a0ada:	601a      	strpl	r2, [r3, #0]
 80a0adc:	4b16      	ldr	r3, [pc, #88]	; (80a0b38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0ade:	681a      	ldr	r2, [r3, #0]
 80a0ae0:	07d2      	lsls	r2, r2, #31
 80a0ae2:	bf5c      	itt	pl
 80a0ae4:	2201      	movpl	r2, #1
 80a0ae6:	601a      	strpl	r2, [r3, #0]
 80a0ae8:	4b14      	ldr	r3, [pc, #80]	; (80a0b3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a0aea:	681a      	ldr	r2, [r3, #0]
 80a0aec:	07d0      	lsls	r0, r2, #31
 80a0aee:	bf5c      	itt	pl
 80a0af0:	2201      	movpl	r2, #1
 80a0af2:	601a      	strpl	r2, [r3, #0]
 80a0af4:	4b12      	ldr	r3, [pc, #72]	; (80a0b40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a0af6:	681a      	ldr	r2, [r3, #0]
 80a0af8:	07d1      	lsls	r1, r2, #31
 80a0afa:	bf5c      	itt	pl
 80a0afc:	2201      	movpl	r2, #1
 80a0afe:	601a      	strpl	r2, [r3, #0]
 80a0b00:	4b10      	ldr	r3, [pc, #64]	; (80a0b44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a0b02:	681a      	ldr	r2, [r3, #0]
 80a0b04:	07d2      	lsls	r2, r2, #31
 80a0b06:	bf5c      	itt	pl
 80a0b08:	2201      	movpl	r2, #1
 80a0b0a:	601a      	strpl	r2, [r3, #0]
 80a0b0c:	4b0e      	ldr	r3, [pc, #56]	; (80a0b48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a0b0e:	681a      	ldr	r2, [r3, #0]
 80a0b10:	07d0      	lsls	r0, r2, #31
 80a0b12:	bf5c      	itt	pl
 80a0b14:	2201      	movpl	r2, #1
 80a0b16:	601a      	strpl	r2, [r3, #0]
 80a0b18:	4b0c      	ldr	r3, [pc, #48]	; (80a0b4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a0b1a:	681a      	ldr	r2, [r3, #0]
 80a0b1c:	07d1      	lsls	r1, r2, #31
 80a0b1e:	bf5c      	itt	pl
 80a0b20:	2201      	movpl	r2, #1
 80a0b22:	601a      	strpl	r2, [r3, #0]
 80a0b24:	4b0a      	ldr	r3, [pc, #40]	; (80a0b50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a0b26:	681a      	ldr	r2, [r3, #0]
 80a0b28:	07d2      	lsls	r2, r2, #31
 80a0b2a:	bf5c      	itt	pl
 80a0b2c:	2201      	movpl	r2, #1
 80a0b2e:	601a      	strpl	r2, [r3, #0]
 80a0b30:	4770      	bx	lr
 80a0b32:	bf00      	nop
 80a0b34:	20000880 	.word	0x20000880
 80a0b38:	2000087c 	.word	0x2000087c
 80a0b3c:	20000878 	.word	0x20000878
 80a0b40:	20000874 	.word	0x20000874
 80a0b44:	20000870 	.word	0x20000870
 80a0b48:	2000086c 	.word	0x2000086c
 80a0b4c:	20000868 	.word	0x20000868
 80a0b50:	20000864 	.word	0x20000864

080a0b54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0b54:	4b18      	ldr	r3, [pc, #96]	; (80a0bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0b56:	681a      	ldr	r2, [r3, #0]
 80a0b58:	07d1      	lsls	r1, r2, #31
 80a0b5a:	bf5c      	itt	pl
 80a0b5c:	2201      	movpl	r2, #1
 80a0b5e:	601a      	strpl	r2, [r3, #0]
 80a0b60:	4b16      	ldr	r3, [pc, #88]	; (80a0bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0b62:	681a      	ldr	r2, [r3, #0]
 80a0b64:	07d2      	lsls	r2, r2, #31
 80a0b66:	bf5c      	itt	pl
 80a0b68:	2201      	movpl	r2, #1
 80a0b6a:	601a      	strpl	r2, [r3, #0]
 80a0b6c:	4b14      	ldr	r3, [pc, #80]	; (80a0bc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a0b6e:	681a      	ldr	r2, [r3, #0]
 80a0b70:	07d0      	lsls	r0, r2, #31
 80a0b72:	bf5c      	itt	pl
 80a0b74:	2201      	movpl	r2, #1
 80a0b76:	601a      	strpl	r2, [r3, #0]
 80a0b78:	4b12      	ldr	r3, [pc, #72]	; (80a0bc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a0b7a:	681a      	ldr	r2, [r3, #0]
 80a0b7c:	07d1      	lsls	r1, r2, #31
 80a0b7e:	bf5c      	itt	pl
 80a0b80:	2201      	movpl	r2, #1
 80a0b82:	601a      	strpl	r2, [r3, #0]
 80a0b84:	4b10      	ldr	r3, [pc, #64]	; (80a0bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a0b86:	681a      	ldr	r2, [r3, #0]
 80a0b88:	07d2      	lsls	r2, r2, #31
 80a0b8a:	bf5c      	itt	pl
 80a0b8c:	2201      	movpl	r2, #1
 80a0b8e:	601a      	strpl	r2, [r3, #0]
 80a0b90:	4b0e      	ldr	r3, [pc, #56]	; (80a0bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a0b92:	681a      	ldr	r2, [r3, #0]
 80a0b94:	07d0      	lsls	r0, r2, #31
 80a0b96:	bf5c      	itt	pl
 80a0b98:	2201      	movpl	r2, #1
 80a0b9a:	601a      	strpl	r2, [r3, #0]
 80a0b9c:	4b0c      	ldr	r3, [pc, #48]	; (80a0bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a0b9e:	681a      	ldr	r2, [r3, #0]
 80a0ba0:	07d1      	lsls	r1, r2, #31
 80a0ba2:	bf5c      	itt	pl
 80a0ba4:	2201      	movpl	r2, #1
 80a0ba6:	601a      	strpl	r2, [r3, #0]
 80a0ba8:	4b0a      	ldr	r3, [pc, #40]	; (80a0bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a0baa:	681a      	ldr	r2, [r3, #0]
 80a0bac:	07d2      	lsls	r2, r2, #31
 80a0bae:	bf5c      	itt	pl
 80a0bb0:	2201      	movpl	r2, #1
 80a0bb2:	601a      	strpl	r2, [r3, #0]
 80a0bb4:	4770      	bx	lr
 80a0bb6:	bf00      	nop
 80a0bb8:	200008a0 	.word	0x200008a0
 80a0bbc:	2000089c 	.word	0x2000089c
 80a0bc0:	20000898 	.word	0x20000898
 80a0bc4:	20000894 	.word	0x20000894
 80a0bc8:	20000890 	.word	0x20000890
 80a0bcc:	2000088c 	.word	0x2000088c
 80a0bd0:	20000888 	.word	0x20000888
 80a0bd4:	20000884 	.word	0x20000884

080a0bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a0bd8:	4b24      	ldr	r3, [pc, #144]	; (80a0c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a0bda:	681a      	ldr	r2, [r3, #0]
 80a0bdc:	07d0      	lsls	r0, r2, #31
 80a0bde:	bf5c      	itt	pl
 80a0be0:	2201      	movpl	r2, #1
 80a0be2:	601a      	strpl	r2, [r3, #0]
 80a0be4:	4b22      	ldr	r3, [pc, #136]	; (80a0c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a0be6:	681a      	ldr	r2, [r3, #0]
 80a0be8:	07d1      	lsls	r1, r2, #31
 80a0bea:	bf5c      	itt	pl
 80a0bec:	2201      	movpl	r2, #1
 80a0bee:	601a      	strpl	r2, [r3, #0]
 80a0bf0:	4b20      	ldr	r3, [pc, #128]	; (80a0c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a0bf2:	681a      	ldr	r2, [r3, #0]
 80a0bf4:	07d2      	lsls	r2, r2, #31
 80a0bf6:	bf5c      	itt	pl
 80a0bf8:	2201      	movpl	r2, #1
 80a0bfa:	601a      	strpl	r2, [r3, #0]
 80a0bfc:	4b1e      	ldr	r3, [pc, #120]	; (80a0c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a0bfe:	681a      	ldr	r2, [r3, #0]
 80a0c00:	07d0      	lsls	r0, r2, #31
 80a0c02:	bf5c      	itt	pl
 80a0c04:	2201      	movpl	r2, #1
 80a0c06:	601a      	strpl	r2, [r3, #0]
 80a0c08:	4b1c      	ldr	r3, [pc, #112]	; (80a0c7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a0c0a:	681a      	ldr	r2, [r3, #0]
 80a0c0c:	07d1      	lsls	r1, r2, #31
 80a0c0e:	bf5c      	itt	pl
 80a0c10:	2201      	movpl	r2, #1
 80a0c12:	601a      	strpl	r2, [r3, #0]
 80a0c14:	4b1a      	ldr	r3, [pc, #104]	; (80a0c80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a0c16:	681a      	ldr	r2, [r3, #0]
 80a0c18:	07d2      	lsls	r2, r2, #31
 80a0c1a:	bf5c      	itt	pl
 80a0c1c:	2201      	movpl	r2, #1
 80a0c1e:	601a      	strpl	r2, [r3, #0]
 80a0c20:	4b18      	ldr	r3, [pc, #96]	; (80a0c84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a0c22:	681a      	ldr	r2, [r3, #0]
 80a0c24:	07d0      	lsls	r0, r2, #31
 80a0c26:	bf5c      	itt	pl
 80a0c28:	2201      	movpl	r2, #1
 80a0c2a:	601a      	strpl	r2, [r3, #0]
 80a0c2c:	4b16      	ldr	r3, [pc, #88]	; (80a0c88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a0c2e:	681a      	ldr	r2, [r3, #0]
 80a0c30:	07d1      	lsls	r1, r2, #31
 80a0c32:	bf5c      	itt	pl
 80a0c34:	2201      	movpl	r2, #1
 80a0c36:	601a      	strpl	r2, [r3, #0]
 80a0c38:	4b14      	ldr	r3, [pc, #80]	; (80a0c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a0c3a:	681a      	ldr	r2, [r3, #0]
 80a0c3c:	07d2      	lsls	r2, r2, #31
 80a0c3e:	bf5c      	itt	pl
 80a0c40:	2201      	movpl	r2, #1
 80a0c42:	601a      	strpl	r2, [r3, #0]
 80a0c44:	4b12      	ldr	r3, [pc, #72]	; (80a0c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a0c46:	681a      	ldr	r2, [r3, #0]
 80a0c48:	07d0      	lsls	r0, r2, #31
 80a0c4a:	bf5c      	itt	pl
 80a0c4c:	2201      	movpl	r2, #1
 80a0c4e:	601a      	strpl	r2, [r3, #0]
 80a0c50:	4b10      	ldr	r3, [pc, #64]	; (80a0c94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a0c52:	681a      	ldr	r2, [r3, #0]
 80a0c54:	07d1      	lsls	r1, r2, #31
 80a0c56:	bf5c      	itt	pl
 80a0c58:	2201      	movpl	r2, #1
 80a0c5a:	601a      	strpl	r2, [r3, #0]
 80a0c5c:	4b0e      	ldr	r3, [pc, #56]	; (80a0c98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a0c5e:	681a      	ldr	r2, [r3, #0]
 80a0c60:	07d2      	lsls	r2, r2, #31
 80a0c62:	bf5c      	itt	pl
 80a0c64:	2201      	movpl	r2, #1
 80a0c66:	601a      	strpl	r2, [r3, #0]
 80a0c68:	4770      	bx	lr
 80a0c6a:	bf00      	nop
 80a0c6c:	200008d0 	.word	0x200008d0
 80a0c70:	200008cc 	.word	0x200008cc
 80a0c74:	200008c8 	.word	0x200008c8
 80a0c78:	200008c4 	.word	0x200008c4
 80a0c7c:	200008c0 	.word	0x200008c0
 80a0c80:	200008bc 	.word	0x200008bc
 80a0c84:	200008b8 	.word	0x200008b8
 80a0c88:	200008b4 	.word	0x200008b4
 80a0c8c:	200008b0 	.word	0x200008b0
 80a0c90:	200008ac 	.word	0x200008ac
 80a0c94:	200008a8 	.word	0x200008a8
 80a0c98:	200008a4 	.word	0x200008a4

080a0c9c <atoi>:
 80a0c9c:	220a      	movs	r2, #10
 80a0c9e:	2100      	movs	r1, #0
 80a0ca0:	f000 b8d8 	b.w	80a0e54 <strtol>

080a0ca4 <__cxa_atexit>:
 80a0ca4:	b510      	push	{r4, lr}
 80a0ca6:	4c05      	ldr	r4, [pc, #20]	; (80a0cbc <__cxa_atexit+0x18>)
 80a0ca8:	4613      	mov	r3, r2
 80a0caa:	b12c      	cbz	r4, 80a0cb8 <__cxa_atexit+0x14>
 80a0cac:	460a      	mov	r2, r1
 80a0cae:	4601      	mov	r1, r0
 80a0cb0:	2002      	movs	r0, #2
 80a0cb2:	f3af 8000 	nop.w
 80a0cb6:	bd10      	pop	{r4, pc}
 80a0cb8:	4620      	mov	r0, r4
 80a0cba:	bd10      	pop	{r4, pc}
 80a0cbc:	00000000 	.word	0x00000000

080a0cc0 <memcpy>:
 80a0cc0:	b510      	push	{r4, lr}
 80a0cc2:	1e43      	subs	r3, r0, #1
 80a0cc4:	440a      	add	r2, r1
 80a0cc6:	4291      	cmp	r1, r2
 80a0cc8:	d004      	beq.n	80a0cd4 <memcpy+0x14>
 80a0cca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a0cce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a0cd2:	e7f8      	b.n	80a0cc6 <memcpy+0x6>
 80a0cd4:	bd10      	pop	{r4, pc}

080a0cd6 <memset>:
 80a0cd6:	4603      	mov	r3, r0
 80a0cd8:	4402      	add	r2, r0
 80a0cda:	4293      	cmp	r3, r2
 80a0cdc:	d002      	beq.n	80a0ce4 <memset+0xe>
 80a0cde:	f803 1b01 	strb.w	r1, [r3], #1
 80a0ce2:	e7fa      	b.n	80a0cda <memset+0x4>
 80a0ce4:	4770      	bx	lr
	...

080a0ce8 <srand>:
 80a0ce8:	b538      	push	{r3, r4, r5, lr}
 80a0cea:	4b12      	ldr	r3, [pc, #72]	; (80a0d34 <srand+0x4c>)
 80a0cec:	4605      	mov	r5, r0
 80a0cee:	681c      	ldr	r4, [r3, #0]
 80a0cf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a0cf2:	b9d3      	cbnz	r3, 80a0d2a <srand+0x42>
 80a0cf4:	2018      	movs	r0, #24
 80a0cf6:	f7ff fb1b 	bl	80a0330 <malloc>
 80a0cfa:	f243 330e 	movw	r3, #13070	; 0x330e
 80a0cfe:	63a0      	str	r0, [r4, #56]	; 0x38
 80a0d00:	8003      	strh	r3, [r0, #0]
 80a0d02:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a0d06:	8043      	strh	r3, [r0, #2]
 80a0d08:	f241 2334 	movw	r3, #4660	; 0x1234
 80a0d0c:	8083      	strh	r3, [r0, #4]
 80a0d0e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a0d12:	80c3      	strh	r3, [r0, #6]
 80a0d14:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a0d18:	8103      	strh	r3, [r0, #8]
 80a0d1a:	2305      	movs	r3, #5
 80a0d1c:	8143      	strh	r3, [r0, #10]
 80a0d1e:	230b      	movs	r3, #11
 80a0d20:	8183      	strh	r3, [r0, #12]
 80a0d22:	2201      	movs	r2, #1
 80a0d24:	2300      	movs	r3, #0
 80a0d26:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a0d2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a0d2c:	2200      	movs	r2, #0
 80a0d2e:	611d      	str	r5, [r3, #16]
 80a0d30:	615a      	str	r2, [r3, #20]
 80a0d32:	bd38      	pop	{r3, r4, r5, pc}
 80a0d34:	20000368 	.word	0x20000368

080a0d38 <strlen>:
 80a0d38:	4603      	mov	r3, r0
 80a0d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a0d3e:	2a00      	cmp	r2, #0
 80a0d40:	d1fb      	bne.n	80a0d3a <strlen+0x2>
 80a0d42:	1a18      	subs	r0, r3, r0
 80a0d44:	3801      	subs	r0, #1
 80a0d46:	4770      	bx	lr

080a0d48 <_strtol_r>:
 80a0d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0d4c:	460f      	mov	r7, r1
 80a0d4e:	4680      	mov	r8, r0
 80a0d50:	483f      	ldr	r0, [pc, #252]	; (80a0e50 <_strtol_r+0x108>)
 80a0d52:	f8d0 9000 	ldr.w	r9, [r0]
 80a0d56:	463d      	mov	r5, r7
 80a0d58:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a0d5c:	eb09 0004 	add.w	r0, r9, r4
 80a0d60:	7840      	ldrb	r0, [r0, #1]
 80a0d62:	f000 0008 	and.w	r0, r0, #8
 80a0d66:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a0d6a:	b108      	cbz	r0, 80a0d70 <_strtol_r+0x28>
 80a0d6c:	462f      	mov	r7, r5
 80a0d6e:	e7f2      	b.n	80a0d56 <_strtol_r+0xe>
 80a0d70:	2c2d      	cmp	r4, #45	; 0x2d
 80a0d72:	d103      	bne.n	80a0d7c <_strtol_r+0x34>
 80a0d74:	1cbd      	adds	r5, r7, #2
 80a0d76:	787c      	ldrb	r4, [r7, #1]
 80a0d78:	2601      	movs	r6, #1
 80a0d7a:	e003      	b.n	80a0d84 <_strtol_r+0x3c>
 80a0d7c:	2c2b      	cmp	r4, #43	; 0x2b
 80a0d7e:	bf04      	itt	eq
 80a0d80:	787c      	ldrbeq	r4, [r7, #1]
 80a0d82:	1cbd      	addeq	r5, r7, #2
 80a0d84:	b113      	cbz	r3, 80a0d8c <_strtol_r+0x44>
 80a0d86:	2b10      	cmp	r3, #16
 80a0d88:	d10a      	bne.n	80a0da0 <_strtol_r+0x58>
 80a0d8a:	e05b      	b.n	80a0e44 <_strtol_r+0xfc>
 80a0d8c:	2c30      	cmp	r4, #48	; 0x30
 80a0d8e:	d157      	bne.n	80a0e40 <_strtol_r+0xf8>
 80a0d90:	7828      	ldrb	r0, [r5, #0]
 80a0d92:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a0d96:	2858      	cmp	r0, #88	; 0x58
 80a0d98:	d14d      	bne.n	80a0e36 <_strtol_r+0xee>
 80a0d9a:	786c      	ldrb	r4, [r5, #1]
 80a0d9c:	2310      	movs	r3, #16
 80a0d9e:	3502      	adds	r5, #2
 80a0da0:	2e00      	cmp	r6, #0
 80a0da2:	bf14      	ite	ne
 80a0da4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a0da8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a0dac:	fbbc faf3 	udiv	sl, ip, r3
 80a0db0:	2700      	movs	r7, #0
 80a0db2:	4638      	mov	r0, r7
 80a0db4:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a0db8:	eb09 0e04 	add.w	lr, r9, r4
 80a0dbc:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a0dc0:	f01e 0f04 	tst.w	lr, #4
 80a0dc4:	d001      	beq.n	80a0dca <_strtol_r+0x82>
 80a0dc6:	3c30      	subs	r4, #48	; 0x30
 80a0dc8:	e00b      	b.n	80a0de2 <_strtol_r+0x9a>
 80a0dca:	f01e 0e03 	ands.w	lr, lr, #3
 80a0dce:	d01b      	beq.n	80a0e08 <_strtol_r+0xc0>
 80a0dd0:	f1be 0f01 	cmp.w	lr, #1
 80a0dd4:	bf0c      	ite	eq
 80a0dd6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a0dda:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a0dde:	ebce 0404 	rsb	r4, lr, r4
 80a0de2:	42a3      	cmp	r3, r4
 80a0de4:	dd10      	ble.n	80a0e08 <_strtol_r+0xc0>
 80a0de6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80a0dea:	d00a      	beq.n	80a0e02 <_strtol_r+0xba>
 80a0dec:	4550      	cmp	r0, sl
 80a0dee:	d806      	bhi.n	80a0dfe <_strtol_r+0xb6>
 80a0df0:	d101      	bne.n	80a0df6 <_strtol_r+0xae>
 80a0df2:	4564      	cmp	r4, ip
 80a0df4:	dc03      	bgt.n	80a0dfe <_strtol_r+0xb6>
 80a0df6:	fb03 4000 	mla	r0, r3, r0, r4
 80a0dfa:	2701      	movs	r7, #1
 80a0dfc:	e001      	b.n	80a0e02 <_strtol_r+0xba>
 80a0dfe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a0e02:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a0e06:	e7d7      	b.n	80a0db8 <_strtol_r+0x70>
 80a0e08:	1c7b      	adds	r3, r7, #1
 80a0e0a:	d10c      	bne.n	80a0e26 <_strtol_r+0xde>
 80a0e0c:	2e00      	cmp	r6, #0
 80a0e0e:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a0e12:	bf14      	ite	ne
 80a0e14:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a0e18:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a0e1c:	f8c8 3000 	str.w	r3, [r8]
 80a0e20:	b92a      	cbnz	r2, 80a0e2e <_strtol_r+0xe6>
 80a0e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0e26:	b106      	cbz	r6, 80a0e2a <_strtol_r+0xe2>
 80a0e28:	4240      	negs	r0, r0
 80a0e2a:	b172      	cbz	r2, 80a0e4a <_strtol_r+0x102>
 80a0e2c:	b107      	cbz	r7, 80a0e30 <_strtol_r+0xe8>
 80a0e2e:	1e69      	subs	r1, r5, #1
 80a0e30:	6011      	str	r1, [r2, #0]
 80a0e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0e36:	2430      	movs	r4, #48	; 0x30
 80a0e38:	2b00      	cmp	r3, #0
 80a0e3a:	d1b1      	bne.n	80a0da0 <_strtol_r+0x58>
 80a0e3c:	2308      	movs	r3, #8
 80a0e3e:	e7af      	b.n	80a0da0 <_strtol_r+0x58>
 80a0e40:	230a      	movs	r3, #10
 80a0e42:	e7ad      	b.n	80a0da0 <_strtol_r+0x58>
 80a0e44:	2c30      	cmp	r4, #48	; 0x30
 80a0e46:	d0a3      	beq.n	80a0d90 <_strtol_r+0x48>
 80a0e48:	e7aa      	b.n	80a0da0 <_strtol_r+0x58>
 80a0e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0e4e:	bf00      	nop
 80a0e50:	20000304 	.word	0x20000304

080a0e54 <strtol>:
 80a0e54:	4613      	mov	r3, r2
 80a0e56:	460a      	mov	r2, r1
 80a0e58:	4601      	mov	r1, r0
 80a0e5a:	4802      	ldr	r0, [pc, #8]	; (80a0e64 <strtol+0x10>)
 80a0e5c:	6800      	ldr	r0, [r0, #0]
 80a0e5e:	f7ff bf73 	b.w	80a0d48 <_strtol_r>
 80a0e62:	bf00      	nop
 80a0e64:	20000368 	.word	0x20000368

080a0e68 <dynalib_user>:
 80a0e68:	080a001d 080a005d 080a0089 080a008d     ....]...........
 80a0e78:	00000000 6c6c6548 6172206f 546e6576     ....Hello ravenT
 80a0e88:	53002154 72616e6f 6e6f6320 7463656e     T!.Sonar connect
 80a0e98:	52006465 65676e61 0000203a              ed.Range: ..

080a0ea4 <_ZTV9IPAddress>:
	...
 80a0eac:	080a0377 080a0369 080a036b 6e6c0066     w...i...k...f.ln
 80a0ebc:	006e6600 65646f63 74656400 006c6961     .fn.code.detail.
 80a0ecc:	25000a0d 75303130 205d0020 00642500     ...%010u .] .%d.
 80a0edc:	2800202c 00203a29 63005b20 2065646f     , .(): . [.code 
 80a0eec:	2500203d 65640069 6c696174 203d2073     = .%i.details = 
 80a0efc:	75616200 65530064 6c616972 42535500     .baud.Serial.USB
 80a0f0c:	69726553 00316c61 65707974 72617000     Serial1.type.par
 80a0f1c:	63006d61 6900646d 6e680064 74730064     am.cmd.id.hnd.st
 80a0f2c:	66006d72 00746c69 006c766c 48646461     rm.filt.lvl.addH
 80a0f3c:	6c646e61 72007265 766f6d65 6e614865     andler.removeHan
 80a0f4c:	72656c64 756e6500 6e61486d 72656c64     dler.enumHandler
 80a0f5c:	534a0073 74534e4f 6d616572 48676f4c     s.JSONStreamLogH
 80a0f6c:	6c646e61 61007265 6e007070 00656e6f     andler.app.none.
 80a0f7c:	63617274 6e690065 77006f66 006e7261     trace.info.warn.
 80a0f8c:	6f727265 61700072 0063696e 006c6c61     error.panic.all.

080a0f9c <_ZTV8SPIClass>:
	...
 80a0fa4:	080a054d 080a054f 2b25005a 3a643330     M...O...Z.%+03d:
 80a0fb4:	75323025 2d592500 252d6d25 48255464     %02u.%Y-%m-%dT%H
 80a0fc4:	3a4d253a 7a255325 63736100 656d6974     :%M:%S%z.asctime
 80a0fd4:	00000000                                ....

080a0fd8 <_ZTV11USARTSerial>:
	...
 80a0fe0:	080a05d9 080a05fd 080a0609 080a03ed     ................
 80a0ff0:	080a05e5 080a05f1 080a05eb 080a05f7     ................
 80a1000:	080a05db 080a05df                       ........

080a1008 <_ZTV9USBSerial>:
	...
 80a1010:	080a06b9 080a06fd 080a06d7 080a03ed     ................
 80a1020:	080a06d1 080a06bb 080a06c3 080a06f7     ................
 80a1030:	080a06cb 080a06b5                       ........

080a1038 <_ZTVN5spark9WiFiClassE>:
	...
 80a1040:	080a082b                                +...

080a1044 <_ctype_>:
 80a1044:	20202000 20202020 28282020 20282828     .         ((((( 
 80a1054:	20202020 20202020 20202020 20202020                     
 80a1064:	10108820 10101010 10101010 10101010      ...............
 80a1074:	04040410 04040404 10040404 10101010     ................
 80a1084:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a1094:	01010101 01010101 01010101 10101010     ................
 80a10a4:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a10b4:	02020202 02020202 02020202 10101010     ................
 80a10c4:	00000020 00000000 00000000 00000000      ...............
	...

080a1148 <__sf_fake_stdin>:
	...

080a1168 <__sf_fake_stdout>:
	...

080a1188 <__sf_fake_stderr>:
	...
 80a11a8:	00000043                                         C.

080a11aa <link_const_variable_data_end>:
	...

080a11ac <link_constructors_location>:
 80a11ac:	080a0175 	.word	0x080a0175
 80a11b0:	080a03dd 	.word	0x080a03dd
 80a11b4:	080a0531 	.word	0x080a0531
 80a11b8:	080a0585 	.word	0x080a0585
 80a11bc:	080a05c5 	.word	0x080a05c5
 80a11c0:	080a0835 	.word	0x080a0835
 80a11c4:	080a098d 	.word	0x080a098d
 80a11c8:	080a09bd 	.word	0x080a09bd
 80a11cc:	080a0a0d 	.word	0x080a0a0d
 80a11d0:	080a0ad1 	.word	0x080a0ad1
 80a11d4:	080a0b55 	.word	0x080a0b55
 80a11d8:	080a0bd9 	.word	0x080a0bd9

080a11dc <link_constructors_end>:
 80a11dc:	00000000 	.word	0x00000000
